openapi: 3.1.0
info:
  title: Azure OpenAI Service API
  description: Azure OpenAI APIs for completions and search
  version: 2025-04-01-preview
  x-marketplace-tags:
    - name: AI
      description: AI and LLM APIs
servers:
  - url: https://{resource-name}.openai.azure.com
    variables:
      resource-name:
        default: your-resource-name
security:
  - bearer:
      - api.read
  - apiKey: []
paths:
  /openai/assistants:
    get:
      operationId: List_Assistants
      tags:
        - Assistants
      summary: Returns a list of assistants.
      parameters:
        - name: limit
          in: query
          description: &pagination_limit_param_description |
            A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
          required: false
          schema:
            type: integer
            default: 20
        - name: order
          in: query
          description: &pagination_order_param_description |
            Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
            x-ms-enum:
              name: ListAssistantsOrder
              modelAsString: true
              values:
                - value: asc
                  description: Order results in ascending order
                - value: desc
                  description: Order results in descending order
        - name: after
          in: query
          description: &pagination_after_param_description |
            A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
          schema:
            type: string
        - name: before
          in: query
          description: &pagination_before_param_description |
            A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
          schema:
            type: string
        - in: query
          name: api-version
          required: true
          schema:
            type: string
            example: 2025-04-01-preview
            description: api version
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listAssistantsResponse"
    post:
      operationId: Create_Assistant
      tags:
        - Assistants
      summary: Create an assistant with a model and instructions.
      parameters:
        - in: query
          name: api-version
          required: true
          schema:
            type: string
            example: 2025-04-01-preview
          description: api version
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createAssistantRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/assistantObject"
  /openai/assistants/{assistant_id}:
    get:
      operationId: Get_Assistant
      tags:
        - Assistants
      summary: Retrieves an assistant.
      parameters:
        - in: path
          name: assistant_id
          required: true
          schema:
            type: string
          description: The ID of the assistant to retrieve.
        - in: query
          name: api-version
          required: true
          schema:
            type: string
            example: 2025-04-01-preview
            description: api version
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/assistantObject"
    post:
      operationId: Modify_Assistant
      tags:
        - Assistants
      summary: Modifies an assistant.
      parameters:
        - in: path
          name: assistant_id
          required: true
          schema:
            type: string
          description: The ID of the assistant to modify.
        - in: query
          name: api-version
          required: true
          schema:
            type: string
            example: 2025-04-01-preview
            description: api version
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/modifyAssistantRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/assistantObject"
    delete:
      operationId: Delete_Assistant
      tags:
        - Assistants
      summary: Delete an assistant.
      parameters:
        - in: path
          name: assistant_id
          required: true
          schema:
            type: string
          description: The ID of the assistant to delete.
        - in: query
          name: api-version
          required: true
          schema:
            type: string
            example: 2025-04-01-preview
            description: api version
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/deleteAssistantResponse"
  /openai/threads:
    post:
      operationId: Create_Thread
      tags:
        - Assistants
      summary: Create a thread.
      parameters:
        - in: query
          name: api-version
          required: true
          schema:
            type: string
            example: 2025-04-01-preview
            description: api version
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createThreadRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/threadObject"
  /openai/threads/{thread_id}:
    get:
      operationId: Get_Thread
      tags:
        - Assistants
      summary: Retrieves a thread.
      parameters:
        - in: path
          name: thread_id
          required: true
          schema:
            type: string
          description: The ID of the thread to retrieve.
        - in: query
          name: api-version
          required: true
          schema:
            type: string
            example: 2025-04-01-preview
            description: api version
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/threadObject"
    post:
      operationId: Modify_Thread
      tags:
        - Assistants
      summary: Modifies a thread.
      parameters:
        - in: path
          name: thread_id
          required: true
          schema:
            type: string
          description: The ID of the thread to modify. Only the `metadata` can be modified.
        - in: query
          name: api-version
          required: true
          schema:
            type: string
            example: 2025-04-01-preview
            description: api version
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/modifyThreadRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/threadObject"
    delete:
      operationId: Delete_Thread
      tags:
        - Assistants
      summary: Delete a thread.
      parameters:
        - in: path
          name: thread_id
          required: true
          schema:
            type: string
          description: The ID of the thread to delete.
        - in: query
          name: api-version
          required: true
          schema:
            type: string
            example: 2025-04-01-preview
            description: api version
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/deleteThreadResponse"
  /openai/threads/{thread_id}/messages:
    get:
      operationId: List_Messages
      tags:
        - Assistants
      summary: Returns a list of messages for a given thread.
      parameters:
        - in: path
          name: thread_id
          required: true
          schema:
            type: string
          description: The ID of the [thread](/docs/api-reference/threads) the messages belong to.
        - name: limit
          in: query
          description: *pagination_limit_param_description
          required: false
          schema:
            type: integer
            default: 20
        - name: order
          in: query
          description: |
            Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
            x-ms-enum:
              name: ListMessagesOrder
              modelAsString: true
              values:
                - value: asc
                  description: Order results in ascending order
                - value: desc
                  description: Order results in descending order
        - name: after
          in: query
          description: |
            A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
          schema:
            type: string
        - name: before
          in: query
          description: |
            A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
          schema:
            type: string
        - name: run_id
          in: query
          description: |
            Filter messages by the run ID that generated them.
          schema:
            type: string
        - in: query
          name: api-version
          required: true
          schema:
            type: string
            example: 2025-04-01-preview
            description: api version
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listMessagesResponse"
    post:
      operationId: Create_Message
      tags:
        - Assistants
      summary: Create a message.
      parameters:
        - in: path
          name: thread_id
          required: true
          schema:
            type: string
          description: The ID of the [thread](/docs/api-reference/threads) to create a message for.
        - in: query
          name: api-version
          required: true
          schema:
            type: string
            example: 2025-04-01-preview
            description: api version
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createMessageRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/messageObject"
  /openai/threads/{thread_id}/messages/{message_id}:
    get:
      operationId: Get_Message
      tags:
        - Assistants
      summary: Retrieve a message.
      parameters:
        - in: path
          name: thread_id
          required: true
          schema:
            type: string
          description: The ID of the [thread](/docs/api-reference/threads) to which this message belongs.
        - in: path
          name: message_id
          required: true
          schema:
            type: string
          description: The ID of the message to retrieve.
        - in: query
          name: api-version
          required: true
          schema:
            type: string
            example: 2025-04-01-preview
            description: api version
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/messageObject"
    post:
      operationId: Modify_Message
      tags:
        - Assistants
      summary: Modifies a message.
      parameters:
        - in: path
          name: thread_id
          required: true
          schema:
            type: string
          description: The ID of the thread to which this message belongs.
        - in: path
          name: message_id
          required: true
          schema:
            type: string
          description: The ID of the message to modify.
        - in: query
          name: api-version
          required: true
          schema:
            type: string
            example: 2025-04-01-preview
            description: api version
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/modifyMessageRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/messageObject"
  /openai/threads/runs:
    post:
      operationId: Create_Thread_And_Run
      tags:
        - Assistants
      summary: Create a thread and run it in one request.
      parameters:
        - in: query
          name: api-version
          required: true
          schema:
            type: string
            example: 2025-04-01-preview
            description: api version
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createThreadAndRunRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/runObject"
  /openai/threads/{thread_id}/runs:
    get:
      operationId: List_Runs
      tags:
        - Assistants
      summary: Returns a list of runs belonging to a thread.
      parameters:
        - name: thread_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the thread the run belongs to.
        - name: limit
          in: query
          description: *pagination_limit_param_description
          required: false
          schema:
            type: integer
            default: 20
        - name: order
          in: query
          description: *pagination_order_param_description
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
            x-ms-enum:
              name: ListRunsOrder
              modelAsString: true
              values:
                - value: asc
                  description: Order results in ascending order
                - value: desc
                  description: Order results in descending order
        - name: after
          in: query
          description: *pagination_after_param_description
          schema:
            type: string
        - name: before
          in: query
          description: *pagination_before_param_description
          schema:
            type: string
        - in: query
          name: api-version
          required: true
          schema:
            type: string
            example: 2025-04-01-preview
            description: api version
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listRunsResponse"
    post:
      operationId: Create_Run
      tags:
        - Assistants
      summary: Create a run.
      parameters:
        - in: path
          name: thread_id
          required: true
          schema:
            type: string
          description: The ID of the thread to run.
        - name: include[]
          in: query
          description: >
            A list of additional fields to include in the response. Currently
            the only supported value is
            `step_details.tool_calls[*].file_search.results[*].content` to fetch
            the file search result content.

          schema:
            type: array
            items:
              type: string
              enum:
                - step_details.tool_calls[*].file_search.results[*].content
              x-ms-enum:
                name: Include
                modelAsString: true
                values:
                  - value: step_details.tool_calls[*].file_search.results[*].content
        - in: query
          name: api-version
          required: true
          schema:
            type: string
            example: 2025-04-01-preview
            description: api version
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createRunRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/runObject"
  /openai/threads/{thread_id}/runs/{run_id}:
    get:
      operationId: Get_Run
      tags:
        - Assistants
      summary: Retrieves a run.
      parameters:
        - in: path
          name: thread_id
          required: true
          schema:
            type: string
          description: The ID of the [thread](/docs/api-reference/threads) that was run.
        - in: path
          name: run_id
          required: true
          schema:
            type: string
          description: The ID of the run to retrieve.
        - in: query
          name: api-version
          required: true
          schema:
            type: string
            example: 2025-04-01-preview
            description: api version
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/runObject"
    post:
      operationId: Modify_Run
      tags:
        - Assistants
      summary: Modifies a run.
      parameters:
        - in: path
          name: thread_id
          required: true
          schema:
            type: string
          description: The ID of the [thread](/docs/api-reference/threads) that was run.
        - in: path
          name: run_id
          required: true
          schema:
            type: string
          description: The ID of the run to modify.
        - in: query
          name: api-version
          required: true
          schema:
            type: string
            example: 2025-04-01-preview
            description: api version
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/modifyRunRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/runObject"
  /openai/threads/{thread_id}/runs/{run_id}/submit_tool_outputs:
    post:
      operationId: Submit_Tool_Outputs_To_Run
      tags:
        - Assistants
      summary: |
        When a run has the `status: "requires_action"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request.
      parameters:
        - in: path
          name: thread_id
          required: true
          schema:
            type: string
          description: The ID of the [thread](/docs/api-reference/threads) to which this run belongs.
        - in: path
          name: run_id
          required: true
          schema:
            type: string
          description: The ID of the run that requires the tool output submission.
        - in: query
          name: api-version
          required: true
          schema:
            type: string
            example: 2025-04-01-preview
            description: api version
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/submitToolOutputsRunRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/runObject"
  /openai/threads/{thread_id}/runs/{run_id}/cancel:
    post:
      operationId: Cancel_Run
      tags:
        - Assistants
      summary: Cancels a run that is `in_progress`.
      parameters:
        - in: path
          name: thread_id
          required: true
          schema:
            type: string
          description: The ID of the thread to which this run belongs.
        - in: path
          name: run_id
          required: true
          schema:
            type: string
          description: The ID of the run to cancel.
        - in: query
          name: api-version
          required: true
          schema:
            type: string
            example: 2025-04-01-preview
          description: api version
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/runObject"
  /openai/threads/{thread_id}/runs/{run_id}/steps:
    get:
      operationId: List_Run_Steps
      tags:
        - Assistants
      summary: Returns a list of run steps belonging to a run.
      parameters:
        - name: thread_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the thread the run and run steps belong to.
        - name: run_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the run the run steps belong to.
        - name: limit
          in: query
          description: *pagination_limit_param_description
          required: false
          schema:
            type: integer
            default: 20
        - name: order
          in: query
          description: *pagination_order_param_description
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
            x-ms-enum:
              name: ListRunStepsOrder
              modelAsString: true
              values:
                - value: asc
                  description: Order results in ascending order
                - value: desc
                  description: Order results in descending order
        - name: after
          in: query
          description: *pagination_after_param_description
          schema:
            type: string
        - name: before
          in: query
          description: *pagination_before_param_description
          schema:
            type: string
        - in: query
          name: api-version
          required: true
          schema:
            type: string
            example: 2025-04-01-preview
          description: api version
        - name: include[]
          in: query
          description: >
            A list of additional fields to include in the response. Currently
            the only supported value is
            `step_details.tool_calls[*].file_search.results[*].content` to fetch
            the file search result content.

          schema:
            type: array
            items:
              type: string
              enum:
                - step_details.tool_calls[*].file_search.results[*].content
              x-ms-enum:
                name: Include
                modelAsString: true
                values:
                  - value: step_details.tool_calls[*].file_search.results[*].content
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listRunStepsResponse"
  /openai/threads/{thread_id}/runs/{run_id}/steps/{step_id}:
    get:
      operationId: Get_Run_Step
      tags:
        - Assistants
      summary: Retrieves a run step.
      parameters:
        - in: path
          name: thread_id
          required: true
          schema:
            type: string
          description: The ID of the thread to which the run and run step belongs.
        - in: path
          name: run_id
          required: true
          schema:
            type: string
          description: The ID of the run to which the run step belongs.
        - in: path
          name: step_id
          required: true
          schema:
            type: string
          description: The ID of the run step to retrieve.
        - name: include[]
          in: query
          description: >
            A list of additional fields to include in the response. Currently
            the only supported value is
            `step_details.tool_calls[*].file_search.results[*].content` to fetch
            the file search result content.

          schema:
            type: array
            items:
              type: string
              enum:
                - step_details.tool_calls[*].file_search.results[*].content
              x-ms-enum:
                name: Include
                modelAsString: true
                values:
                  - value: step_details.tool_calls[*].file_search.results[*].content
        - in: query
          name: api-version
          required: true
          schema:
            type: string
            example: 2025-04-01-preview
          description: api version
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/runStepObject"
  /openai/vector_stores:
    get:
      operationId: List_Vector_Stores
      tags:
        - Vector Stores
      summary: Returns a list of vector stores.
      parameters:
        - name: limit
          in: query
          description: *pagination_limit_param_description
          required: false
          schema:
            type: integer
            default: 20
        - name: order
          in: query
          description: *pagination_order_param_description
          schema:
            type: string
            default: desc
            enum: ["asc", "desc"]
            x-ms-enum:
              name: ListVectorStoresOrder
              modelAsString: true
              values:
                - value: asc
                - value: desc
        - name: after
          in: query
          description: *pagination_after_param_description
          schema:
            type: string
        - name: before
          in: query
          description: *pagination_before_param_description
          schema:
            type: string
        - in: query
          name: api-version
          required: true
          schema:
            type: string
            example: 2025-04-01-preview
          description: api version
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listVectorStoresResponse"
    post:
      operationId: Create_Vector_Store
      tags:
        - Vector Stores
      summary: Create a vector store.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createVectorStoreRequest"
      parameters:
        - in: query
          name: api-version
          required: true
          schema:
            type: string
            example: 2025-04-01-preview
          description: api version
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/vectorStoreObject"

  /openai/vector_stores/{vector_store_id}:
    get:
      operationId: Get_Vector_Store
      tags:
        - Vector Stores
      summary: Retrieves a vector store.
      parameters:
        - in: path
          name: vector_store_id
          required: true
          schema:
            type: string
          description: The ID of the vector store to retrieve.
        - in: query
          name: api-version
          required: true
          schema:
            type: string
            example: 2025-04-01-preview
          description: api version
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/vectorStoreObject"
    post:
      operationId: Modify_Vector_Store
      tags:
        - Vector Stores
      summary: Modifies a vector store.
      parameters:
        - in: path
          name: vector_store_id
          required: true
          schema:
            type: string
          description: The ID of the vector store to modify.
        - in: query
          name: api-version
          required: true
          schema:
            type: string
            example: 2025-04-01-preview
          description: api version
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateVectorStoreRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/vectorStoreObject"

    delete:
      operationId: Delete_Vector_Store
      tags:
        - Vector Stores
      summary: Delete a vector store.
      parameters:
        - in: path
          name: vector_store_id
          required: true
          schema:
            type: string
          description: The ID of the vector store to delete.
        - in: query
          name: api-version
          required: true
          schema:
            type: string
            example: 2025-04-01-preview
          description: api version
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/deleteVectorStoreResponse"

  /openai/vector_stores/{vector_store_id}/files:
    get:
      operationId: List_Vector_Store_Files
      tags:
        - Vector Stores
      summary: Returns a list of vector store files.
      parameters:
        - name: vector_store_id
          in: path
          description: The ID of the vector store that the files belong to.
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: *pagination_limit_param_description
          required: false
          schema:
            type: integer
            default: 20
        - name: order
          in: query
          description: *pagination_order_param_description
          schema:
            type: string
            default: desc
            enum: ["asc", "desc"]
            x-ms-enum:
              name: ListVectorStoreFilesOrder
              modelAsString: true
              values:
                - value: asc
                - value: desc
        - name: after
          in: query
          description: *pagination_after_param_description
          schema:
            type: string
        - name: before
          in: query
          description: *pagination_before_param_description
          schema:
            type: string
        - name: filter
          in: query
          description: "Filter by file status. One of `in_progress`, `completed`, `failed`, `cancelled`."
          schema:
            type: string
            enum: ["in_progress", "completed", "failed", "cancelled"]
            x-ms-enum:
              name: ListVectorStoreFilesFilter
              modelAsString: true
              values:
                - value: in_progress
                - value: completed
                - value: failed
                - value: cancelled
        - in: query
          name: api-version
          required: true
          schema:
            type: string
            example: 2025-04-01-preview
          description: api version
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listVectorStoreFilesResponse"
    post:
      operationId: Create_Vector_Store_File
      tags:
        - Vector Stores
      summary: Create a vector store file by attaching a [File](/docs/api-reference/files) to a [vector store](/docs/api-reference/vector-stores/object).
      parameters:
        - in: path
          name: vector_store_id
          required: true
          schema:
            type: string
            example: vs_abc123
          description: |
            The ID of the vector store for which to create a File.
        - in: query
          name: api-version
          required: true
          schema:
            type: string
            example: 2025-04-01-preview
          description: api version
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createVectorStoreFileRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/vectorStoreFileObject"

  /openai/vector_stores/{vector_store_id}/files/{file_id}:
    get:
      operationId: Get_Vector_Store_File
      tags:
        - Vector Stores
      summary: Retrieves a vector store file.
      parameters:
        - in: path
          name: vector_store_id
          required: true
          schema:
            type: string
            example: vs_abc123
          description: The ID of the vector store that the file belongs to.
        - in: path
          name: file_id
          required: true
          schema:
            type: string
            example: file-abc123
          description: The ID of the file being retrieved.
        - in: query
          name: api-version
          required: true
          schema:
            type: string
            example: 2025-04-01-preview
          description: api version
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/vectorStoreFileObject"
    delete:
      operationId: Delete_Vector_Store_File
      tags:
        - Vector Stores
      summary: Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted. To delete the file, use the [delete file](/docs/api-reference/files/delete) endpoint.
      parameters:
        - in: path
          name: vector_store_id
          required: true
          schema:
            type: string
          description: The ID of the vector store that the file belongs to.
        - in: path
          name: file_id
          required: true
          schema:
            type: string
          description: The ID of the file to delete.
        - in: query
          name: api-version
          required: true
          schema:
            type: string
            example: 2025-04-01-preview
          description: api version
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/deleteVectorStoreFileResponse"
    post:
      operationId: updateVectorStoreFileAttributes
      tags:
        - Vector Stores
      summary: Update attributes on a vector store file.
      parameters:
        - in: path
          name: vector_store_id
          required: true
          schema:
            type: string
            example: vs_abc123
          description: The ID of the vector store the file belongs to.
        - in: path
          name: file_id
          required: true
          schema:
            type: string
            example: file-abc123
          description: The ID of the file to update attributes.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateVectorStoreFileAttributesRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/vectorStoreFileObject"
  /openai/vector_stores/{vector_store_id}/files/{file_id}/content:
    get:
      operationId: retrieveVectorStoreFileContent
      tags:
        - Vector Stores
      summary: Retrieve the parsed contents of a vector store file.
      parameters:
        - in: path
          name: vector_store_id
          required: true
          schema:
            type: string
            example: vs_abc123
          description: The ID of the vector store.
        - in: path
          name: file_id
          required: true
          schema:
            type: string
            example: file-abc123
          description: The ID of the file within the vector store.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VectorStoreFileContentResponse"
  /openai/vector_stores/{vector_store_id}/search:
    post:
      operationId: searchVectorStore
      tags:
        - Vector Stores
      summary: Search a vector store for relevant chunks based on a query and file
        attributes filter.
      parameters:
        - in: path
          name: vector_store_id
          required: true
          schema:
            type: string
            example: vs_abc123
          description: The ID of the vector store to search.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VectorStoreSearchRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VectorStoreSearchResultsPage"

  /openai/vector_stores/{vector_store_id}/file_batches:
    post:
      operationId: Create_Vector_Store_File_Batch
      tags:
        - Vector Stores
      summary: Create a vector store file batch.
      parameters:
        - in: path
          name: vector_store_id
          required: true
          schema:
            type: string
            example: vs_abc123
          description: |
            The ID of the vector store for which to create a File Batch.
        - in: query
          name: api-version
          required: true
          schema:
            type: string
            example: 2025-04-01-preview
          description: api version
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createVectorStoreFileBatchRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/vectorStoreFileBatchObject"

  /openai/vector_stores/{vector_store_id}/file_batches/{batch_id}:
    get:
      operationId: Get_Vector_Store_File_Batch
      tags:
        - Vector Stores
      summary: Retrieves a vector store file batch.
      parameters:
        - in: path
          name: vector_store_id
          required: true
          schema:
            type: string
            example: vs_abc123
          description: The ID of the vector store that the file batch belongs to.
        - in: path
          name: batch_id
          required: true
          schema:
            type: string
            example: vsfb_abc123
          description: The ID of the file batch being retrieved.
        - in: query
          name: api-version
          required: true
          schema:
            type: string
            example: 2025-04-01-preview
          description: api version
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/vectorStoreFileBatchObject"

  /openai/vector_stores/{vector_store_id}/file_batches/{batch_id}/cancel:
    post:
      operationId: Cancel_Vector_Store_File_Batch
      tags:
        - Vector Stores
      summary: Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible.
      parameters:
        - in: path
          name: vector_store_id
          required: true
          schema:
            type: string
          description: The ID of the vector store that the file batch belongs to.
        - in: path
          name: batch_id
          required: true
          schema:
            type: string
          description: The ID of the file batch to cancel.
        - in: query
          name: api-version
          required: true
          schema:
            type: string
            example: 2025-04-01-preview
          description: api version
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/vectorStoreFileBatchObject"

  /openai/vector_stores/{vector_store_id}/file_batches/{batch_id}/files:
    get:
      operationId: List_Vector_Store_File_Batch_Files
      tags:
        - Vector Stores
      summary: Returns a list of vector store files in a batch.
      parameters:
        - name: vector_store_id
          in: path
          description: The ID of the vector store that the files belong to.
          required: true
          schema:
            type: string
        - name: batch_id
          in: path
          description: The ID of the file batch that the files belong to.
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: *pagination_limit_param_description
          required: false
          schema:
            type: integer
            default: 20
        - name: order
          in: query
          description: *pagination_order_param_description
          schema:
            type: string
            default: desc
            enum: ["asc", "desc"]
            x-ms-enum:
              name: ListVectorStoreFilesOrder
              modelAsString: true
              values:
                - value: asc
                - value: desc
        - name: after
          in: query
          description: *pagination_after_param_description
          schema:
            type: string
        - name: before
          in: query
          description: *pagination_before_param_description
          schema:
            type: string
        - name: filter
          in: query
          description: "Filter by file status. One of `in_progress`, `completed`, `failed`, `cancelled`."
          schema:
            type: string
            enum: ["in_progress", "completed", "failed", "cancelled"]
            x-ms-enum:
              name: ListVectorStoreFilesFilter
              modelAsString: true
              values:
                - value: in_progress
                - value: completed
                - value: failed
                - value: cancelled
        - in: query
          name: api-version
          required: true
          schema:
            type: string
            example: 2025-04-01-preview
          description: api version
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listVectorStoreFilesResponse"
  /openai/realtimeapi/sessions:
    post:
      summary: >
        Create an ephemeral API token for use in client-side applications with
        the Realtime API. Can be configured with the same session parameters as the
        `session.update` client event.

        It responds with a session object, plus a `client_secret` key which
        contains a usable ephemeral API token that can be used to authenticate browser
        clients for the Realtime API.
      operationId: create_realtimeSession
      tags:
        - Realtime
      parameters:
        - in: query
          name: api-version
          required: true
          schema:
            type: string
            example: 2025-04-01-preview
            description: api version
      requestBody:
        description: Create an ephemeral API key with the given session configuration.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RealtimeSessionCreateRequest"
      responses:
        "200":
          description: Session created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RealtimeSessionCreateResponse"
  /openai/realtimeapi/transcription_sessions:
    post:
      summary: >
        Create an ephemeral API token for use in client-side applications with
        the Realtime API specifically for realtime transcriptions. 

        Can be configured with the same session parameters as the
        `transcription_session.update` client event.

        It responds with a session object, plus a `client_secret` key which
        contains a usable ephemeral API token that can be used to authenticate browser
        clients for the Realtime API.
      operationId: create_transcriptionRealtimeSession
      tags:
        - Realtime
      parameters:
        - in: query
          name: api-version
          required: true
          schema:
            type: string
            example: 2025-04-01-preview
            description: api version
      requestBody:
        description: Create an ephemeral API key with the given session configuration.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RealtimeTranscriptionSessionCreateRequest"
      responses:
        "200":
          description: Session created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RealtimeTranscriptionSessionCreateResponse"
  /openai/responses:
    post:
      summary: >
        Creates a model response. Provide [text](/docs/guides/text) or

        [image](/docs/guides/images) inputs to generate
        [text](/docs/guides/text)

        or [JSON](/docs/guides/structured-outputs) outputs. Have the model call

        your own [custom code](/docs/guides/function-calling) or use built-in

        [tools](/docs/guides/tools) like [web
        search](/docs/guides/tools-web-search)

        or [file search](/docs/guides/tools-file-search) to use your own data

        as input for the model's response.
      tags:
        - Responses
      parameters:
        - in: query
          name: api-version
          required: true
          schema:
            type: string
            example: 2025-04-01-preview
            description: api version
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createResponse"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/response"
            text/event-stream:
              schema:
                $ref: "#/components/schemas/responseStreamEvent"
        default:
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
          headers:
            apim-request-id:
              description: Request ID for troubleshooting purposes
              schema:
                type: string

  /openai/responses/{response_id}:
    get:
      summary: |
        Retrieves a model response with the given ID.
      tags:
        - Responses
      parameters:
        - in: query
          name: api-version
          required: true
          schema:
            type: string
            example: 2025-04-01-preview
            description: api version
        - in: path
          name: response_id
          required: true
          schema:
            type: string
            example: resp_677efb5139a88190b512bc3fef8e535d
          description: The ID of the response to retrieve.
        - in: query
          name: include
          schema:
            type: array
            items:
              $ref: "#/components/schemas/includable"
          description: |
            Additional fields to include in the response. See the `include`
            parameter for Response creation above for more information.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/response"
        default:
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
          headers:
            apim-request-id:
              description: Request ID for troubleshooting purposes
              schema:
                type: string
    delete:
      operationId: deleteResponse
      tags:
        - Responses
      summary: |
        Deletes a model response with the given ID.
      parameters:
        - in: query
          name: api-version
          required: true
          schema:
            type: string
            example: 2025-04-01-preview
            description: api version
        - in: path
          name: response_id
          required: true
          schema:
            type: string
            example: resp_677efb5139a88190b512bc3fef8e535d
          description: The ID of the response to delete.
      responses:
        "200":
          description: OK
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        default:
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
          headers:
            apim-request-id:
              description: Request ID for troubleshooting purposes
              schema:
                type: string
  /openai/responses/{response_id}/input_items:
    get:
      summary: Returns a list of input items for a given response.
      tags:
        - Responses
      parameters:
        - in: query
          name: api-version
          required: true
          schema:
            type: string
            example: 2025-04-01-preview
            description: api version
        - in: path
          name: response_id
          required: true
          schema:
            type: string
          description: The ID of the response to retrieve input items for.
        - name: limit
          in: query
          description: >
            A limit on the number of objects to be returned. Limit can range
            between

            1 and 100, and the default is 20.
          required: false
          schema:
            type: integer
            default: 20
        - in: query
          name: order
          schema:
            type: string
            enum:
              - asc
              - desc
          description: |
            The order to return the input items in. Default is `asc`.
            - `asc`: Return the input items in ascending order.
            - `desc`: Return the input items in descending order.
        - in: query
          name: after
          schema:
            type: string
          description: |
            An item ID to list items after, used in pagination.
        - in: query
          name: before
          schema:
            type: string
          description: |
            An item ID to list items before, used in pagination.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseItemList"

components:
  schemas:
    errorResponse:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/error"
    errorBase:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
    error:
      type: object
      allOf:
        - $ref: "#/components/schemas/errorBase"
      properties:
        param:
          type: string
        type:
          type: string
        inner_error:
          $ref: "#/components/schemas/innerError"
    innerError:
      description: Inner error with additional details.
      type: object
      properties:
        code:
          $ref: "#/components/schemas/innerErrorCode"
        content_filter_results:
          $ref: "#/components/schemas/contentFilterPromptResults"
    innerErrorCode:
      description: Error codes for the inner error object.
      enum:
        - ResponsibleAIPolicyViolation
      type: string
      x-ms-enum:
        name: InnerErrorCode
        modelAsString: true
        values:
          - value: ResponsibleAIPolicyViolation
            description: The prompt violated one of more content filter rules.
    contentFilterCompletionTextSpan:
      description: Describes a span within generated completion text.  Offset 0 is the first UTF32 code point of the completion text.
      type: object
      properties:
        completion_start_offset:
          description: Offset of the UTF32 code point which begins the span.
          type: integer
        completion_end_offset:
          description: Offset of the first UTF32 code point which is excluded from the span. This field is always equal to completion_start_offset for empty spans. This field is always larger than completion_start_offset for non-empty spans.
          type: integer
      required:
        - completion_start_offset
        - completion_end_offset
    contentFilterResultBase:
      type: object
      properties:
        filtered:
          type: boolean
      required:
        - filtered
    contentFilterSeverityResult:
      type: object
      allOf:
        - $ref: "#/components/schemas/contentFilterResultBase"
        - properties:
            severity:
              type: string
              enum:
                - safe
                - low
                - medium
                - high
              x-ms-enum:
                name: ContentFilterSeverity
                modelAsString: true
                values:
                  - value: safe
                    description: General content or related content in generic or non-harmful contexts.
                  - value: low
                    description: Harmful content at a low intensity and risk level.
                  - value: medium
                    description: Harmful content at a medium intensity and risk level.
                  - value: high
                    description: Harmful content at a high intensity and risk level.
      required:
        - severity
        - filtered
    contentFilterDetectedResult:
      type: object
      allOf:
        - $ref: "#/components/schemas/contentFilterResultBase"
        - properties:
            detected:
              type: boolean
      required:
        - detected
        - filtered
    contentFilterDetectedWithCitationResult:
      type: object
      allOf:
        - $ref: "#/components/schemas/contentFilterDetectedResult"
        - properties:
            citation:
              type: object
              properties:
                URL:
                  type: string
                license:
                  type: string
      required:
        - detected
        - filtered
    contentFilterDetectedWithCompletionTextSpansResult:
      type: object
      allOf:
        - $ref: "#/components/schemas/contentFilterDetectedResult"
        - properties:
            details:
              type: array
              items:
                $ref: "#/components/schemas/contentFilterCompletionTextSpan"
      required:
        - detected
        - filtered
        - details
    contentFilterIdResult:
      type: object
      allOf:
        - $ref: "#/components/schemas/contentFilterResultBase"
        - properties:
            id:
              type: string
      required:
        - id
        - filtered
    contentFilterResultsBase:
      type: object
      description: Information about the content filtering results.
      properties:
        sexual:
          $ref: "#/components/schemas/contentFilterSeverityResult"
        violence:
          $ref: "#/components/schemas/contentFilterSeverityResult"
        hate:
          $ref: "#/components/schemas/contentFilterSeverityResult"
        self_harm:
          $ref: "#/components/schemas/contentFilterSeverityResult"
        profanity:
          $ref: "#/components/schemas/contentFilterDetectedResult"
        custom_blocklists:
          $ref: "#/components/schemas/contentFilterDetailedResults"
        error:
          $ref: "#/components/schemas/errorBase"
    contentFilterPromptResults:
      type: object
      description: Information about the content filtering category (hate, sexual, violence, self_harm), if it has been detected, as well as the severity level (very_low, low, medium, high-scale that determines the intensity and risk level of harmful content) and if it has been filtered or not. Information about jailbreak content and profanity, if it has been detected, and if it has been filtered or not. And information about customer block list, if it has been filtered and its id.
      allOf:
        - $ref: "#/components/schemas/contentFilterResultsBase"
        - properties:
            jailbreak:
              $ref: "#/components/schemas/contentFilterDetectedResult"
            indirect_attack:
              $ref: "#/components/schemas/contentFilterDetectedResult"
    contentFilterChoiceResults:
      type: object
      description: Information about the content filtering category (hate, sexual, violence, self_harm), if it has been detected, as well as the severity level (very_low, low, medium, high-scale that determines the intensity and risk level of harmful content) and if it has been filtered or not. Information about third party text and profanity, if it has been detected, and if it has been filtered or not. And information about customer block list, if it has been filtered and its id.
      allOf:
        - $ref: "#/components/schemas/contentFilterResultsBase"
        - properties:
            protected_material_text:
              $ref: "#/components/schemas/contentFilterDetectedResult"
        - properties:
            protected_material_code:
              $ref: "#/components/schemas/contentFilterDetectedWithCitationResult"
        - properties:
            ungrounded_material:
              $ref: "#/components/schemas/contentFilterDetectedWithCompletionTextSpansResult"
    contentFilterDetailedResults:
      type: object
      description: Content filtering results with a detail of content filter ids for the filtered segments.
      allOf:
        - $ref: "#/components/schemas/contentFilterResultBase"
        - properties:
            details:
              items:
                $ref: "#/components/schemas/contentFilterIdResult"
              type: array
      required:
        - filtered
        - details
    dalleContentFilterResults:
      type: object
      description: Information about the content filtering results.
      properties:
        sexual:
          $ref: "#/components/schemas/contentFilterSeverityResult"
        violence:
          $ref: "#/components/schemas/contentFilterSeverityResult"
        hate:
          $ref: "#/components/schemas/contentFilterSeverityResult"
        self_harm:
          $ref: "#/components/schemas/contentFilterSeverityResult"
    dalleFilterResults:
      type: object
      description: Information about the content filtering category (hate, sexual, violence, self_harm), if it has been detected, as well as the severity level (very_low, low, medium, high-scale that determines the intensity and risk level of harmful content) and if it has been filtered or not. Information about jailbreak content and profanity, if it has been detected, and if it has been filtered or not. And information about customer block list, if it has been filtered and its id.
      allOf:
        - $ref: "#/components/schemas/dalleContentFilterResults"
        - properties:
            profanity:
              $ref: "#/components/schemas/contentFilterDetectedResult"
            jailbreak:
              $ref: "#/components/schemas/contentFilterDetectedResult"
            custom_blocklists:
              $ref: "#/components/schemas/contentFilterDetailedResults"

    chatCompletionFunctionParameters:
      type: object
      description: The parameters the functions accepts, described as a JSON Schema object. See the [guide/](https://learn.microsoft.com/en-us/azure/ai-services/openai/how-to/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.
      additionalProperties: true

    chatCompletionRequestMessage:
      oneOf:
        - $ref: "#/components/schemas/ChatCompletionRequestDeveloperMessage"
        - $ref: "#/components/schemas/chatCompletionRequestSystemMessage"
        - $ref: "#/components/schemas/chatCompletionRequestUserMessage"
        - $ref: "#/components/schemas/chatCompletionRequestAssistantMessage"
        - $ref: "#/components/schemas/chatCompletionRequestToolMessage"
        - $ref: "#/components/schemas/chatCompletionRequestFunctionMessage"

    ChatCompletionRequestDeveloperMessage:
      type: object
      title: Developer message
      description: >
        Developer-provided instructions that the model should follow, regardless
        of

        messages sent by the user. With o1 models and newer, `developer`
        messages

        replace the previous `system` messages.
      properties:
        content:
          description: The contents of the developer message.
          oneOf:
            - type: string
              description: The contents of the developer message.
              title: Text content
            - type: array
              description: An array of content parts with a defined type. For developer
                messages, only type `text` is supported.
              title: Array of content parts
              items:
                $ref: "#/components/schemas/chatCompletionRequestDeveloperMessageContentPart"
              minItems: 1
        role:
          type: string
          enum:
            - developer
          description: The role of the messages author, in this case `developer`.
        name:
          type: string
          description: An optional name for the participant. Provides the model
            information to differentiate between participants of the same role.
      required:
        - content
        - role

    chatCompletionRequestSystemMessage:
      type: object
      title: System message
      properties:
        content:
          description: The contents of the system message.
          oneOf:
            - type: string
              description: The contents of the system message.
              title: Text content
            - type: array
              description: An array of content parts with a defined type. For system messages, only type `text` is supported.
              title: Array of content parts
              items:
                $ref: "#/components/schemas/chatCompletionRequestSystemMessageContentPart"
              minItems: 1
        role:
          type: string
          enum: ["system"]
          description: The role of the messages author, in this case `system`.
        name:
          type: string
          description: An optional name for the participant. Provides the model information to differentiate between participants of the same role.
      required:
        - content
        - role

    chatCompletionRequestUserMessage:
      type: object
      title: User message
      properties:
        content:
          description: |
            The contents of the user message.
          oneOf:
            - type: string
              description: The text contents of the message.
              title: Text content
            - type: array
              description: An array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts. Image input is only supported when using the `gpt-4o` model.
              title: Array of content parts
              items:
                $ref: "#/components/schemas/chatCompletionRequestUserMessageContentPart"
              minItems: 1
          x-oaiExpandable: true
        role:
          type: string
          enum: ["user"]
          description: The role of the messages author, in this case `user`.
        name:
          type: string
          description: An optional name for the participant. Provides the model information to differentiate between participants of the same role.
      required:
        - content
        - role

    chatCompletionRequestAssistantMessage:
      type: object
      title: Assistant message
      properties:
        content:
          nullable: true
          oneOf:
            - type: string
              description: The contents of the assistant message.
              title: Text content
            - type: array
              description: An array of content parts with a defined type. Can be one or more of type `text`, or exactly one of type `refusal`.
              title: Array of content parts
              items:
                $ref: "#/components/schemas/chatCompletionRequestAssistantMessageContentPart"
              minItems: 1
          description: |
            The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified.
        refusal:
          nullable: true
          type: string
          description: The refusal message by the assistant.
        role:
          type: string
          enum: ["assistant"]
          description: The role of the messages author, in this case `assistant`.
        name:
          type: string
          description: An optional name for the participant. Provides the model information to differentiate between participants of the same role.
        tool_calls:
          $ref: "#/components/schemas/chatCompletionMessageToolCalls"
        function_call:
          type: object
          deprecated: true
          description: "Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model."
          nullable: true
          properties:
            arguments:
              type: string
              description: The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
            name:
              type: string
              description: The name of the function to call.
          required:
            - arguments
            - name
      required:
        - role

    chatCompletionRequestToolMessage:
      type: object
      title: Tool message
      properties:
        role:
          type: string
          enum: ["tool"]
          description: The role of the messages author, in this case `tool`.
        content:
          oneOf:
            - type: string
              description: The contents of the tool message.
              title: Text content
            - type: array
              description: An array of content parts with a defined type. For tool messages, only type `text` is supported.
              title: Array of content parts
              items:
                $ref: "#/components/schemas/chatCompletionRequestToolMessageContentPart"
              minItems: 1
          description: The contents of the tool message.
        tool_call_id:
          type: string
          description: Tool call that this message is responding to.
      required:
        - role
        - content
        - tool_call_id

    chatCompletionRequestFunctionMessage:
      type: object
      title: Function message
      deprecated: true
      properties:
        role:
          type: string
          enum: ["function"]
          description: The role of the messages author, in this case `function`.
        content:
          nullable: true
          type: string
          description: The contents of the function message.
        name:
          type: string
          description: The name of the function to call.
      required:
        - role
        - content
        - name

    chatCompletionRequestDeveloperMessageContentPart:
      oneOf:
        - $ref: "#/components/schemas/chatCompletionRequestMessageContentPartText"

    chatCompletionRequestSystemMessageContentPart:
      oneOf:
        - $ref: "#/components/schemas/chatCompletionRequestMessageContentPartText"

    chatCompletionRequestUserMessageContentPart:
      oneOf:
        - $ref: "#/components/schemas/chatCompletionRequestMessageContentPartText"
        - $ref: "#/components/schemas/chatCompletionRequestMessageContentPartImage"
        - $ref: "#/components/schemas/chatCompletionRequestMessageContentPartAudio"

    chatCompletionRequestAssistantMessageContentPart:
      oneOf:
        - $ref: "#/components/schemas/chatCompletionRequestMessageContentPartText"
        - $ref: "#/components/schemas/chatCompletionRequestMessageContentPartRefusal"

    chatCompletionRequestToolMessageContentPart:
      oneOf:
        - $ref: "#/components/schemas/chatCompletionRequestMessageContentPartText"

    chatCompletionRequestMessageContentPartText:
      type: object
      title: Text content part
      properties:
        type:
          type: string
          enum: ["text"]
          description: The type of the content part.
        text:
          type: string
          description: The text content.
      required:
        - type
        - text

    chatCompletionRequestMessageContentPartAudio:
      type: object
      title: Audio content part
      description: |
        Learn about [audio inputs](/docs/guides/audio).
      properties:
        type:
          type: string
          enum:
            - input_audio
          description: The type of the content part. Always `input_audio`.
        input_audio:
          type: object
          properties:
            data:
              type: string
              description: Base64 encoded audio data.
            format:
              type: string
              enum:
                - wav
                - mp3
              description: >
                The format of the encoded audio data. Currently supports "wav"
                and "mp3".
          required:
            - data
            - format
      required:
        - type
        - input_audio

    chatCompletionRequestMessageContentPartImage:
      type: object
      title: Image content part
      properties:
        type:
          type: string
          enum: ["image_url"]
          description: The type of the content part.
        image_url:
          type: object
          properties:
            url:
              type: string
              description: Either a URL of the image or the base64 encoded image data.
              format: uri
            detail:
              type: string
              description: Specifies the detail level of the image. Learn more in the [Vision guide](https://learn.microsoft.com/en-us/azure/ai-services/openai/how-to/gpt-with-vision?tabs=rest%2Csystem-assigned%2Cresource#detail-parameter-settings-in-image-processing-low-high-auto).
              enum: ["auto", "low", "high"]
              default: "auto"
          required:
            - url
      required:
        - type
        - image_url

    chatCompletionRequestMessageContentPartRefusal:
      type: object
      title: Refusal content part
      properties:
        type:
          type: string
          enum: ["refusal"]
          description: The type of the content part.
        refusal:
          type: string
          description: The refusal message generated by the model.
      required:
        - type
        - refusal
    azureChatExtensionConfiguration:
      required:
        - type
      type: object
      properties:
        type:
          $ref: "#/components/schemas/azureChatExtensionType"
      description: |2-
          A representation of configuration data for a single Azure OpenAI chat extension. This will be used by a chat
          completions request that should use Azure OpenAI chat extensions to augment the response behavior.
          The use of this configuration is compatible only with Azure OpenAI.
      discriminator:
        propertyName: type
        mapping:
          azure_search: "#/components/schemas/azureSearchChatExtensionConfiguration"
          azure_cosmos_db: "#/components/schemas/azureCosmosDBChatExtensionConfiguration"
          elasticsearch: "#/components/schemas/elasticsearchChatExtensionConfiguration"
          mongo_db: "#/components/schemas/mongoDBChatExtensionConfiguration"
          pinecone: "#/components/schemas/pineconeChatExtensionConfiguration"
    azureChatExtensionType:
      type: string
      description: |2-
          A representation of configuration data for a single Azure OpenAI chat extension. This will be used by a chat
          completions request that should use Azure OpenAI chat extensions to augment the response behavior.
          The use of this configuration is compatible only with Azure OpenAI.
      enum:
        - azure_search
        - azure_cosmos_db
        - elasticsearch
        - mongo_db
        - pinecone
      x-ms-enum:
        name: AzureChatExtensionType
        modelAsString: true
        values:
          - name: azureSearch
            value: azure_search
            description: Represents the use of Azure Search as an Azure OpenAI chat extension.
          - name: azureCosmosDB
            value: azure_cosmos_db
            description: Represents the use of Azure Cosmos DB as an Azure OpenAI chat extension.
          - name: elasticsearch
            value: elasticsearch
            description: Represents the use of Elasticsearch® index as an Azure OpenAI chat extension.
          - name: mongoDB
            value: mongo_db
            description: Represents the use of Mongo DB as an Azure OpenAI chat extension.
          - name: pinecone
            value: pinecone
            description: Represents the use of Pinecone index as an Azure OpenAI chat extension.
    azureSearchChatExtensionConfiguration:
      required:
        - parameters
      description: |-
        A specific representation of configurable options for Azure Search when using it as an Azure OpenAI chat
        extension.
      allOf:
        - $ref: "#/components/schemas/azureChatExtensionConfiguration"
        - properties:
            parameters:
              $ref: "#/components/schemas/azureSearchChatExtensionParameters"
      x-ms-discriminator-value: azure_search
    azureSearchChatExtensionParameters:
      required:
        - authentication
        - endpoint
        - index_name
      type: object
      properties:
        authentication:
          oneOf:
            - $ref: "#/components/schemas/onYourDataApiKeyAuthenticationOptions"
            - $ref: "#/components/schemas/onYourDataSystemAssignedManagedIdentityAuthenticationOptions"
            - $ref: "#/components/schemas/onYourDataUserAssignedManagedIdentityAuthenticationOptions"
            - $ref: "#/components/schemas/onYourDataAccessTokenAuthenticationOptions"
        top_n_documents:
          type: integer
          description: The configured top number of documents to feature for the configured query.
          format: int32
        max_search_queries:
          type: integer
          description: The max number of rewritten queries should be send to search provider for one user message. If not specified, the system will decide the number of queries to send.
          format: int32
        allow_partial_result:
          type: boolean
          default: false
          description: If specified as true, the system will allow partial search results to be used and the request fails if all the queries fail. If not specified, or specified as false, the request will fail if any search query fails.
        in_scope:
          type: boolean
          description: Whether queries should be restricted to use of indexed data.
        strictness:
          maximum: 5
          minimum: 1
          type: integer
          description: The configured strictness of the search relevance filtering. The higher of strictness, the higher of the precision but lower recall of the answer.
          format: int32
        endpoint:
          type: string
          description: The absolute endpoint path for the Azure Search resource to use.
          format: uri
        index_name:
          type: string
          description: The name of the index to use as available in the referenced Azure Search resource.
        fields_mapping:
          $ref: "#/components/schemas/azureSearchIndexFieldMappingOptions"
        query_type:
          $ref: "#/components/schemas/azureSearchQueryType"
        semantic_configuration:
          type: string
          description: The additional semantic configuration for the query.
        filter:
          type: string
          description: Search filter.
        embedding_dependency:
          oneOf:
            - $ref: "#/components/schemas/onYourDataEndpointVectorizationSource"
            - $ref: "#/components/schemas/onYourDataDeploymentNameVectorizationSource"
            - $ref: "#/components/schemas/onYourDataIntegratedVectorizationSource"
        include_contexts:
          type: array
          description: The included properties of the output context. If not specified, the default value is `citations` and `intent`.
          items:
            $ref: "#/components/schemas/onYourDataContextProperty"
      description: Parameters for Azure Search when used as an Azure OpenAI chat extension.
    azureSearchIndexFieldMappingOptions:
      type: object
      properties:
        title_field:
          type: string
          description: The name of the index field to use as a title.
        url_field:
          type: string
          description: The name of the index field to use as a URL.
        filepath_field:
          type: string
          description: The name of the index field to use as a filepath.
        content_fields:
          type: array
          description: The names of index fields that should be treated as content.
          items:
            type: string
        content_fields_separator:
          type: string
          description: The separator pattern that content fields should use.
        vector_fields:
          type: array
          description: The names of fields that represent vector data.
          items:
            type: string
        image_vector_fields:
          type: array
          description: The names of fields that represent image vector data.
          items:
            type: string
      description: Optional settings to control how fields are processed when using a configured Azure Search resource.
    azureSearchQueryType:
      type: string
      description: The type of Azure Search retrieval query that should be executed when using it as an Azure OpenAI chat extension.
      enum:
        - simple
        - semantic
        - vector
        - vector_simple_hybrid
        - vector_semantic_hybrid
      x-ms-enum:
        name: AzureSearchQueryType
        modelAsString: true
        values:
          - name: simple
            value: simple
            description: Represents the default, simple query parser.
          - name: semantic
            value: semantic
            description: Represents the semantic query parser for advanced semantic modeling.
          - name: vector
            value: vector
            description: Represents vector search over computed data.
          - name: vectorSimpleHybrid
            value: vector_simple_hybrid
            description: Represents a combination of the simple query strategy with vector data.
          - name: vectorSemanticHybrid
            value: vector_semantic_hybrid
            description: Represents a combination of semantic search and vector data querying.
    azureCosmosDBChatExtensionConfiguration:
      required:
        - parameters
      description: |-
        A specific representation of configurable options for Azure Cosmos DB when using it as an Azure OpenAI chat
        extension.
      allOf:
        - $ref: "#/components/schemas/azureChatExtensionConfiguration"
        - properties:
            parameters:
              $ref: "#/components/schemas/azureCosmosDBChatExtensionParameters"
      x-ms-discriminator-value: azure_cosmos_db
    azureCosmosDBChatExtensionParameters:
      required:
        - authentication
        - container_name
        - database_name
        - embedding_dependency
        - fields_mapping
        - index_name
      type: object
      properties:
        authentication:
          $ref: "#/components/schemas/onYourDataConnectionStringAuthenticationOptions"
        top_n_documents:
          type: integer
          description: The configured top number of documents to feature for the configured query.
          format: int32
        max_search_queries:
          type: integer
          description: The max number of rewritten queries should be send to search provider for one user message. If not specified, the system will decide the number of queries to send.
          format: int32
        allow_partial_result:
          type: boolean
          default: false
          description: If specified as true, the system will allow partial search results to be used and the request fails if all the queries fail. If not specified, or specified as false, the request will fail if any search query fails.
        in_scope:
          type: boolean
          description: Whether queries should be restricted to use of indexed data.
        strictness:
          maximum: 5
          minimum: 1
          type: integer
          description: The configured strictness of the search relevance filtering. The higher of strictness, the higher of the precision but lower recall of the answer.
          format: int32
        database_name:
          type: string
          description: The MongoDB vCore database name to use with Azure Cosmos DB.
        container_name:
          type: string
          description: The name of the Azure Cosmos DB resource container.
        index_name:
          type: string
          description: The MongoDB vCore index name to use with Azure Cosmos DB.
        fields_mapping:
          $ref: "#/components/schemas/azureCosmosDBFieldMappingOptions"
        embedding_dependency:
          oneOf:
            - $ref: "#/components/schemas/onYourDataEndpointVectorizationSource"
            - $ref: "#/components/schemas/onYourDataDeploymentNameVectorizationSource"
        include_contexts:
          type: array
          description: The included properties of the output context. If not specified, the default value is `citations` and `intent`.
          items:
            $ref: "#/components/schemas/onYourDataContextProperty"
      description: |-
        Parameters to use when configuring Azure OpenAI On Your Data chat extensions when using Azure Cosmos DB for
        MongoDB vCore.
    azureCosmosDBFieldMappingOptions:
      required:
        - content_fields
        - vector_fields
      type: object
      properties:
        title_field:
          type: string
          description: The name of the index field to use as a title.
        url_field:
          type: string
          description: The name of the index field to use as a URL.
        filepath_field:
          type: string
          description: The name of the index field to use as a filepath.
        content_fields:
          type: array
          description: The names of index fields that should be treated as content.
          items:
            type: string
        content_fields_separator:
          type: string
          description: The separator pattern that content fields should use.
        vector_fields:
          type: array
          description: The names of fields that represent vector data.
          items:
            type: string
      description: Optional settings to control how fields are processed when using a configured Azure Cosmos DB resource.
    elasticsearchChatExtensionConfiguration:
      required:
        - parameters
      description: |-
        A specific representation of configurable options for Elasticsearch when using it as an Azure OpenAI chat
        extension.
      allOf:
        - $ref: "#/components/schemas/azureChatExtensionConfiguration"
        - properties:
            parameters:
              $ref: "#/components/schemas/elasticsearchChatExtensionParameters"
      x-ms-discriminator-value: elasticsearch
    elasticsearchChatExtensionParameters:
      required:
        - authentication
        - endpoint
        - index_name
      type: object
      properties:
        authentication:
          oneOf:
            - $ref: "#/components/schemas/onYourDataKeyAndKeyIdAuthenticationOptions"
            - $ref: "#/components/schemas/onYourDataEncodedApiKeyAuthenticationOptions"
        top_n_documents:
          type: integer
          description: The configured top number of documents to feature for the configured query.
          format: int32
        max_search_queries:
          type: integer
          description: The max number of rewritten queries should be send to search provider for one user message. If not specified, the system will decide the number of queries to send.
          format: int32
        allow_partial_result:
          type: boolean
          default: false
          description: If specified as true, the system will allow partial search results to be used and the request fails if all the queries fail. If not specified, or specified as false, the request will fail if any search query fails.
        in_scope:
          type: boolean
          description: Whether queries should be restricted to use of indexed data.
        strictness:
          maximum: 5
          minimum: 1
          type: integer
          description: The configured strictness of the search relevance filtering. The higher of strictness, the higher of the precision but lower recall of the answer.
          format: int32
        endpoint:
          type: string
          description: The endpoint of Elasticsearch®.
          format: uri
        index_name:
          type: string
          description: The index name of Elasticsearch®.
        fields_mapping:
          $ref: "#/components/schemas/elasticsearchIndexFieldMappingOptions"
        query_type:
          $ref: "#/components/schemas/elasticsearchQueryType"
        embedding_dependency:
          oneOf:
            - $ref: "#/components/schemas/onYourDataEndpointVectorizationSource"
            - $ref: "#/components/schemas/onYourDataDeploymentNameVectorizationSource"
            - $ref: "#/components/schemas/onYourDataModelIdVectorizationSource"
        include_contexts:
          type: array
          description: The included properties of the output context. If not specified, the default value is `citations` and `intent`.
          items:
            $ref: "#/components/schemas/onYourDataContextProperty"
      description: "Parameters to use when configuring Elasticsearch® as an Azure OpenAI chat extension. "
    elasticsearchIndexFieldMappingOptions:
      type: object
      properties:
        title_field:
          type: string
          description: The name of the index field to use as a title.
        url_field:
          type: string
          description: The name of the index field to use as a URL.
        filepath_field:
          type: string
          description: The name of the index field to use as a filepath.
        content_fields:
          type: array
          description: The names of index fields that should be treated as content.
          items:
            type: string
        content_fields_separator:
          type: string
          description: The separator pattern that content fields should use.
        vector_fields:
          type: array
          description: The names of fields that represent vector data.
          items:
            type: string
      description: Optional settings to control how fields are processed when using a configured Elasticsearch® resource.
    elasticsearchQueryType:
      type: string
      description: The type of Elasticsearch® retrieval query that should be executed when using it as an Azure OpenAI chat extension.
      enum:
        - simple
        - vector
      x-ms-enum:
        name: ElasticsearchQueryType
        modelAsString: true
        values:
          - name: simple
            value: simple
            description: Represents the default, simple query parser.
          - name: vector
            value: vector
            description: Represents vector search over computed data.
    mongoDBChatExtensionConfiguration:
      required:
        - parameters
      description: |-
        A specific representation of configurable options for Mongo DB when using it as an Azure OpenAI chat
        extension.
      allOf:
        - $ref: "#/components/schemas/azureChatExtensionConfiguration"
        - properties:
            parameters:
              $ref: "#/components/schemas/mongoDBChatExtensionParameters"
      x-ms-discriminator-value: mongo_db
    mongoDBChatExtensionParameters:
      required:
        - authentication
        - app_name
        - collection_name
        - database_name
        - endpoint
        - embedding_dependency
        - fields_mapping
        - index_name
      type: object
      properties:
        authentication:
          $ref: "#/components/schemas/onYourDataUsernameAndPasswordAuthenticationOptions"
        top_n_documents:
          type: integer
          description: The configured top number of documents to feature for the configured query.
          format: int32
        max_search_queries:
          type: integer
          description: The max number of rewritten queries should be send to search provider for one user message. If not specified, the system will decide the number of queries to send.
          format: int32
        allow_partial_result:
          type: boolean
          default: false
          description: If specified as true, the system will allow partial search results to be used and the request fails if all the queries fail. If not specified, or specified as false, the request will fail if any search query fails.
        in_scope:
          type: boolean
          description: Whether queries should be restricted to use of indexed data.
        strictness:
          maximum: 5
          minimum: 1
          type: integer
          description: The configured strictness of the search relevance filtering. The higher of strictness, the higher of the precision but lower recall of the answer.
          format: int32
        endpoint:
          type: string
          description: The name of the Mongo DB cluster endpoint.
        database_name:
          type: string
          description: The name of the Mongo DB database.
        collection_name:
          type: string
          description: The name of the Mongo DB Collection.
        app_name:
          type: string
          description: The name of the Mongo DB Application.
        index_name:
          type: string
          description: The The name of the Mongo DB index.
        fields_mapping:
          $ref: "#/components/schemas/mongoDBFieldMappingOptions"
        embedding_dependency:
          oneOf:
            - $ref: "#/components/schemas/onYourDataEndpointVectorizationSource"
            - $ref: "#/components/schemas/onYourDataDeploymentNameVectorizationSource"
        include_contexts:
          type: array
          description: The included properties of the output context. If not specified, the default value is `citations` and `intent`.
          items:
            $ref: "#/components/schemas/onYourDataContextProperty"
      description: |-
        Parameters to use when configuring Azure OpenAI On Your Data chat extensions when using Mongo DB.

    mongoDBFieldMappingOptions:
      required:
        - content_fields
        - vector_fields
      type: object
      properties:
        title_field:
          type: string
          description: The name of the index field to use as a title.
        url_field:
          type: string
          description: The name of the index field to use as a URL.
        filepath_field:
          type: string
          description: The name of the index field to use as a filepath.
        content_fields:
          type: array
          description: The names of index fields that should be treated as content.
          items:
            type: string
        content_fields_separator:
          type: string
          description: The separator pattern that content fields should use.
        vector_fields:
          type: array
          description: The names of fields that represent vector data.
          items:
            type: string
      description: Optional settings to control how fields are processed when using a configured Mongo DB resource.

    pineconeChatExtensionConfiguration:
      required:
        - parameters
      description: |-
        A specific representation of configurable options for Pinecone when using it as an Azure OpenAI chat
        extension.
      allOf:
        - $ref: "#/components/schemas/azureChatExtensionConfiguration"
        - properties:
            parameters:
              $ref: "#/components/schemas/pineconeChatExtensionParameters"
      x-ms-discriminator-value: pinecone
    pineconeChatExtensionParameters:
      required:
        - authentication
        - embedding_dependency
        - environment
        - fields_mapping
        - index_name
      type: object
      properties:
        authentication:
          $ref: "#/components/schemas/onYourDataApiKeyAuthenticationOptions"
        top_n_documents:
          type: integer
          description: The configured top number of documents to feature for the configured query.
          format: int32
        max_search_queries:
          type: integer
          description: The max number of rewritten queries should be send to search provider for one user message. If not specified, the system will decide the number of queries to send.
          format: int32
        allow_partial_result:
          type: boolean
          default: false
          description: If specified as true, the system will allow partial search results to be used and the request fails if all the queries fail. If not specified, or specified as false, the request will fail if any search query fails.
        in_scope:
          type: boolean
          description: Whether queries should be restricted to use of indexed data.
        strictness:
          maximum: 5
          minimum: 1
          type: integer
          description: The configured strictness of the search relevance filtering. The higher of strictness, the higher of the precision but lower recall of the answer.
          format: int32
        environment:
          type: string
          description: The environment name of Pinecone.
        index_name:
          type: string
          description: The name of the Pinecone database index.
        fields_mapping:
          $ref: "#/components/schemas/pineconeFieldMappingOptions"
        embedding_dependency:
          $ref: "#/components/schemas/onYourDataDeploymentNameVectorizationSource"
        include_contexts:
          type: array
          description: The included properties of the output context. If not specified, the default value is `citations` and `intent`.
          items:
            $ref: "#/components/schemas/onYourDataContextProperty"
      description: Parameters for configuring Azure OpenAI Pinecone chat extensions.
    pineconeFieldMappingOptions:
      required:
        - content_fields
      type: object
      properties:
        title_field:
          type: string
          description: The name of the index field to use as a title.
        url_field:
          type: string
          description: The name of the index field to use as a URL.
        filepath_field:
          type: string
          description: The name of the index field to use as a filepath.
        content_fields:
          type: array
          description: The names of index fields that should be treated as content.
          items:
            type: string
        content_fields_separator:
          type: string
          description: The separator pattern that content fields should use.
      description: Optional settings to control how fields are processed when using a configured Pinecone resource.
    onYourDataAuthenticationOptions:
      required:
        - type
      type: object
      properties:
        type:
          $ref: "#/components/schemas/onYourDataAuthenticationType"
      description: The authentication options for Azure OpenAI On Your Data.
      discriminator:
        propertyName: type
        mapping:
          api_key: "#/components/schemas/onYourDataApiKeyAuthenticationOptions"
          connection_string: "#/components/schemas/onYourDataConnectionStringAuthenticationOptions"
          key_and_key_id: "#/components/schemas/onYourDataKeyAndKeyIdAuthenticationOptions"
          encoded_api_key: "#/components/schemas/onYourDataEncodedApiKeyAuthenticationOptions"
          access_token: "#/components/schemas/onYourDataAccessTokenAuthenticationOptions"
          system_assigned_managed_identity: "#/components/schemas/onYourDataSystemAssignedManagedIdentityAuthenticationOptions"
          user_assigned_managed_identity: "#/components/schemas/onYourDataUserAssignedManagedIdentityAuthenticationOptions"
          username_and_password: "#/components/schemas/onYourDataUsernameAndPasswordAuthenticationOptions"
    onYourDataContextProperty:
      type: string
      description: The context property.
      enum:
        - citations
        - intent
        - all_retrieved_documents
      x-ms-enum:
        name: OnYourDataContextProperty
        modelAsString: true
        values:
          - name: citations
            value: citations
            description: The `citations` property.
          - name: intent
            value: intent
            description: The `intent` property.
          - name: allRetrievedDocuments
            value: all_retrieved_documents
            description: The `all_retrieved_documents` property.
    onYourDataAuthenticationType:
      type: string
      description: The authentication types supported with Azure OpenAI On Your Data.
      enum:
        - api_key
        - connection_string
        - key_and_key_id
        - encoded_api_key
        - access_token
        - system_assigned_managed_identity
        - user_assigned_managed_identity
        - username_and_password
      x-ms-enum:
        name: OnYourDataAuthenticationType
        modelAsString: true
        values:
          - name: apiKey
            value: api_key
            description: Authentication via API key.
          - name: connectionString
            value: connection_string
            description: Authentication via connection string.
          - name: keyAndKeyId
            value: key_and_key_id
            description: Authentication via key and key ID pair.
          - name: encodedApiKey
            value: encoded_api_key
            description: Authentication via encoded API key.
          - name: accessToken
            value: access_token
            description: Authentication via access token.
          - name: systemAssignedManagedIdentity
            value: system_assigned_managed_identity
            description: Authentication via system-assigned managed identity.
          - name: userAssignedManagedIdentity
            value: user_assigned_managed_identity
            description: Authentication via user-assigned managed identity.
          - name: usernameAndPassword
            value: username_and_password
            description: Authentication via username and password.
    onYourDataApiKeyAuthenticationOptions:
      required:
        - key
      description: The authentication options for Azure OpenAI On Your Data when using an API key.
      allOf:
        - $ref: "#/components/schemas/onYourDataAuthenticationOptions"
        - properties:
            key:
              type: string
              description: The API key to use for authentication.
      x-ms-discriminator-value: api_key
    onYourDataConnectionStringAuthenticationOptions:
      required:
        - connection_string
      description: The authentication options for Azure OpenAI On Your Data when using a connection string.
      allOf:
        - $ref: "#/components/schemas/onYourDataAuthenticationOptions"
        - properties:
            connection_string:
              type: string
              description: The connection string to use for authentication.
      x-ms-discriminator-value: connection_string
    onYourDataKeyAndKeyIdAuthenticationOptions:
      required:
        - key
        - key_id
      description: The authentication options for Azure OpenAI On Your Data when using an Elasticsearch key and key ID pair.
      allOf:
        - $ref: "#/components/schemas/onYourDataAuthenticationOptions"
        - properties:
            key:
              type: string
              description: The Elasticsearch key to use for authentication.
            key_id:
              type: string
              description: The Elasticsearch key ID to use for authentication.
      x-ms-discriminator-value: key_and_key_id
    onYourDataEncodedApiKeyAuthenticationOptions:
      required:
        - encoded_api_key
      description: The authentication options for Azure OpenAI On Your Data when using an Elasticsearch encoded API key.
      allOf:
        - $ref: "#/components/schemas/onYourDataAuthenticationOptions"
        - properties:
            encoded_api_key:
              type: string
              description: The Elasticsearch encoded API key to use for authentication.
      x-ms-discriminator-value: encoded_api_key
    onYourDataAccessTokenAuthenticationOptions:
      required:
        - access_token
      description: The authentication options for Azure OpenAI On Your Data when using access token.
      allOf:
        - $ref: "#/components/schemas/onYourDataAuthenticationOptions"
        - properties:
            access_token:
              type: string
              description: The access token to use for authentication.
      x-ms-discriminator-value: access_token
    onYourDataSystemAssignedManagedIdentityAuthenticationOptions:
      description: The authentication options for Azure OpenAI On Your Data when using a system-assigned managed identity.
      allOf:
        - $ref: "#/components/schemas/onYourDataAuthenticationOptions"
      x-ms-discriminator-value: system_assigned_managed_identity
    onYourDataUserAssignedManagedIdentityAuthenticationOptions:
      required:
        - managed_identity_resource_id
      description: The authentication options for Azure OpenAI On Your Data when using a user-assigned managed identity.
      allOf:
        - $ref: "#/components/schemas/onYourDataAuthenticationOptions"
        - properties:
            managed_identity_resource_id:
              type: string
              description: The resource ID of the user-assigned managed identity to use for authentication.
      x-ms-discriminator-value: user_assigned_managed_identity
    onYourDataUsernameAndPasswordAuthenticationOptions:
      required:
        - username
        - password
      description: The authentication options for Azure OpenAI On Your Data when using a username and a password.
      allOf:
        - $ref: "#/components/schemas/onYourDataAuthenticationOptions"
        - properties:
            username:
              type: string
              description: The username to use for authentication.
            password:
              type: string
              description: The password. to use for authentication.
      x-ms-discriminator-value: username_and_password
    onYourDataVectorizationSource:
      required:
        - type
      type: object
      properties:
        type:
          $ref: "#/components/schemas/onYourDataVectorizationSourceType"
      description: An abstract representation of a vectorization source for Azure OpenAI On Your Data with vector search.
      discriminator:
        propertyName: type
        mapping:
          endpoint: "#/components/schemas/onYourDataEndpointVectorizationSource"
          deployment_name: "#/components/schemas/onYourDataDeploymentNameVectorizationSource"
          integrated: "#/components/schemas/onYourDataIntegratedVectorizationSource"
          model_id: "#/components/schemas/onYourDataModelIdVectorizationSource"
    onYourDataVectorizationSourceType:
      type: string
      description: |-
        Represents the available sources Azure OpenAI On Your Data can use to configure vectorization of data for use with
        vector search.
      enum:
        - endpoint
        - deployment_name
        - integrated
        - model_id
      x-ms-enum:
        name: OnYourDataVectorizationSourceType
        modelAsString: true
        values:
          - name: endpoint
            value: endpoint
            description: Represents vectorization performed by public service calls to an Azure OpenAI embedding model.
          - name: deploymentName
            value: deployment_name
            description: |-
              Represents an Ada model deployment name to use. This model deployment must be in the same Azure OpenAI resource, but
              On Your Data will use this model deployment via an internal call rather than a public one, which enables vector
              search even in private networks.
          - name: integrated
            value: integrated
            description: Represents the integrated vectorizer defined within the search resource.
          - name: modelId
            value: model_id
            description: |-
              Represents a specific embedding model ID as defined in the search service.
              Currently only supported by Elasticsearch®.
    onYourDataEndpointVectorizationSource:
      required:
        - authentication
        - endpoint
      description: |-
        The details of a a vectorization source, used by Azure OpenAI On Your Data when applying vector search, that is based
        on a public Azure OpenAI endpoint call for embeddings.
      allOf:
        - $ref: "#/components/schemas/onYourDataVectorizationSource"
        - properties:
            endpoint:
              type: string
              description: Specifies the resource endpoint URL from which embeddings should be retrieved. It should be in the format of https://YOUR_RESOURCE_NAME.openai.azure.com/openai/deployments/YOUR_DEPLOYMENT_NAME/embeddings. The api-version query parameter is not allowed.
              format: uri
            authentication:
              oneOf:
                - $ref: "#/components/schemas/onYourDataApiKeyAuthenticationOptions"
                - $ref: "#/components/schemas/onYourDataAccessTokenAuthenticationOptions"
            dimensions:
              type: integer
              description: The number of dimensions the embeddings should have. Only supported in `text-embedding-3` and later models.
              format: int32
      x-ms-discriminator-value: endpoint
    onYourDataDeploymentNameVectorizationSource:
      required:
        - deployment_name
      description: |-
        The details of a a vectorization source, used by Azure OpenAI On Your Data when applying vector search, that is based
        on an internal embeddings model deployment name in the same Azure OpenAI resource.
      allOf:
        - $ref: "#/components/schemas/onYourDataVectorizationSource"
        - properties:
            deployment_name:
              type: string
              description: Specifies the name of the model deployment to use for vectorization. This model deployment must be in the same Azure OpenAI resource, but On Your Data will use this model deployment via an internal call rather than a public one, which enables vector search even in private networks.
            dimensions:
              type: integer
              description: The number of dimensions the embeddings should have. Only supported in `text-embedding-3` and later models.
              format: int32
      x-ms-discriminator-value: deployment_name
    onYourDataIntegratedVectorizationSource:
      description: |-
        Represents the integrated vectorizer defined within the search resource.
      allOf:
        - $ref: "#/components/schemas/onYourDataVectorizationSource"
      x-ms-discriminator-value: integrated
    onYourDataModelIdVectorizationSource:
      required:
        - model_id
      description: |-
        The details of a a vectorization source, used by Azure OpenAI On Your Data when applying vector search, that is based
        on a search service model ID. Currently only supported by Elasticsearch®.
      allOf:
        - $ref: "#/components/schemas/onYourDataVectorizationSource"
        - properties:
            model_id:
              type: string
              description: Specifies the model ID to use for vectorization. This model ID must be defined in the search service.
      x-ms-discriminator-value: model_id
    citation:
      required:
        - content
      type: object
      properties:
        content:
          type: string
          description: The content of the citation.
        title:
          type: string
          description: The title of the citation.
        url:
          type: string
          description: The URL of the citation.
        filepath:
          type: string
          description: The file path of the citation.
        chunk_id:
          type: string
          description: The chunk ID of the citation.
        rerank_score:
          type: number
          description: The rerank score of the retrieved document.
          format: double
      description: citation information for a chat completions response message.
    retrievedDocument:
      type: object
      description: The retrieved document.
      required:
        - search_queries
        - data_source_index
      allOf:
        - $ref: "#/components/schemas/citation"
        - properties:
            search_queries:
              type: array
              description: The search queries used to retrieve the document.
              items:
                type: string
            data_source_index:
              type: integer
              description: The index of the data source.
              format: int32
            original_search_score:
              type: number
              description: The original search score of the retrieved document.
              format: double
            filter_reason:
              $ref: "#/components/schemas/filterReason"
              description: Represents the rationale for filtering the document. If the document does not undergo filtering, this field will remain unset.

    filterReason:
      type: string
      description: The filtering reason of the retrieved document.
      enum:
        - score
        - rerank
      x-ms-enum:
        name: FilterReason
        modelAsString: true
        values:
          - name: score
            value: score
            description: The document is filtered by original search score threshold defined by `strictness` configure.
          - name: rerank
            value: rerank
            description: The document is not filtered by original search score threshold, but is filtered by rerank score and `top_n_documents` configure.

    chatCompletionMessageToolCall:
      type: object
      properties:
        id:
          type: string
          description: The ID of the tool call.
        type:
          $ref: "#/components/schemas/toolCallType"
        function:
          type: object
          description: The function that the model called.
          properties:
            name:
              type: string
              description: The name of the function to call.
            arguments:
              type: string
              description: The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
          required:
            - name
            - arguments
      required:
        - id
        - type
        - function
    toolCallType:
      type: string
      enum:
        - function
      description: The type of the tool call, in this case `function`.
      x-ms-enum:
        name: ToolCallType
        modelAsString: true
        values:
          - value: function
            description: The tool call type is function.
    chatCompletionRequestMessageTool:
      allOf:
        - $ref: "#/components/schemas/chatCompletionRequestMessage"
        - type: object
          nullable: true
          properties:
            tool_call_id:
              type: string
              description: Tool call that this message is responding to.
            content:
              type: string
              description: The contents of the message.
              nullable: true
      required:
        - tool_call_id
        - content
    chatCompletionRequestMessageFunction:
      allOf:
        - $ref: "#/components/schemas/chatCompletionRequestMessage"
        - type: object
          description: Deprecated. Message that represents a function.
          nullable: true
          properties:
            role:
              type: string
              enum:
                - function
              description: The role of the messages author, in this case `function`.
            name:
              type: string
              description: The contents of the message.
            content:
              type: string
              description: The contents of the message.
              nullable: true
      required:
        - function_call_id
        - content

    ParallelToolCalls:
      description: Whether to enable parallel function calling during tool use.
      type: boolean
      default: true

    chatCompletionMessageToolCalls:
      type: array
      description: The tool calls generated by the model, such as function calls.
      items:
        $ref: "#/components/schemas/chatCompletionMessageToolCall"

    ResponseFormatText:
      type: object
      properties:
        type:
          type: string
          description: "The type of response format being defined: `text`"
          enum:
            - text
      required:
        - type

    ResponseFormatJsonObject:
      type: object
      properties:
        type:
          type: string
          description: "The type of response format being defined: `json_object`"
          enum:
            - json_object
      required:
        - type

    ResponseFormatJsonSchemaSchema:
      type: object
      description: "The schema for the response format, described as a JSON Schema object."
      additionalProperties: true

    ResponseFormatJsonSchema:
      type: object
      properties:
        type:
          type: string
          description: "The type of response format being defined: `json_schema`"
          enum:
            - json_schema
        json_schema:
          type: object
          properties:
            description:
              type: string
              description: A description of what the response format is for, used by the model to determine how to respond in the format.
            name:
              type: string
              description: The name of the response format. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
            schema:
              $ref: "#/components/schemas/ResponseFormatJsonSchemaSchema"
            strict:
              type: boolean
              nullable: true
              default: false
              description: Whether to enable strict schema adherence when generating the output. If set to true, the model will always follow the exact schema defined in the `schema` field. Only a subset of JSON Schema is supported when `strict` is `true`.
          required:
            - schema
            - name
      required:
        - type
        - json_schema

    runCompletionUsage:
      type: object
      description: Usage statistics related to the run. This value will be `null` if the run is not in a terminal state (i.e. `in_progress`, `queued`, etc.).
      properties:
        completion_tokens:
          type: integer
          description: Number of completion tokens used over the course of the run.
        prompt_tokens:
          type: integer
          description: Number of prompt tokens used over the course of the run.
        total_tokens:
          type: integer
          description: Total number of tokens used (prompt + completion).
      required:
        - prompt_tokens
        - completion_tokens
        - total_tokens
      nullable: true

    assistantsApiResponseFormatOption:
      description: |
        Specifies the format that the model must output. Compatible with
        GPT-4o, GPT-4 Turbo, 
        and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.

        Setting to `{ "type": "json_schema", "json_schema": {...} }`
        enables Structured Outputs which ensures the model 
        will match your supplied JSON schema. 
        Learn more in the [Structured Outputs guide](/docs/guides/structured-outputs).

        Setting to `{ "type": "json_object" }` enables 
        JSON mode, which ensures the message the model generates is valid JSON.

        **Important:** when using JSON mode, 
        you **must** also instruct the model to produce JSON yourself 
        via a system or user message. Without this, the model may 
        generate an unending stream of whitespace until the generation 
        reaches the token limit, resulting in a long-running and 
        seemingly "stuck" request. Also note that the message content 
        may be partially cut off if `finish_reason="length"`, which indicates 
        the generation exceeded `max_tokens` or the conversation exceeded 
        the max context length.
      oneOf:
        - type: string
          description: >
            `auto` is the default value
          enum:
            - auto
          x-ms-enum:
            name: AssistantsApiResponseFormatOption
            modelAsString: true
            values:
              - value: auto
        - $ref: "#/components/schemas/ResponseFormatText"
        - $ref: "#/components/schemas/ResponseFormatJsonObject"
        - $ref: "#/components/schemas/ResponseFormatJsonSchema"

    assistantObject:
      type: object
      title: Assistant
      description: Represents an `assistant` that can call the model and use tools.
      properties:
        id:
          description: The identifier, which can be referenced in API endpoints.
          type: string
        object:
          description: The object type, which is always `assistant`.
          type: string
          enum:
            - assistant
          x-ms-enum:
            name: AssistantObjectType
            modelAsString: true
            values:
              - value: assistant
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the assistant was created.
        name:
          description: &assistant_name_param_description |
            The name of the assistant. The maximum length is 256 characters.
          type: string
          maxLength: 256
          nullable: true
        description:
          description: &assistant_description_param_description |
            The description of the assistant. The maximum length is 512 characters.
          type: string
          maxLength: 512
          nullable: true
        model:
          description: |
            ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
          type: string
        instructions:
          description: &assistant_instructions_param_description |
            The system instructions that the assistant uses. The maximum length is 256,000 characters.
          type: string
          maxLength: 256000
          nullable: true
        tools:
          description: &assistant_tools_param_description |
            A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.
          default: []
          type: array
          maxItems: 128
          items:
            oneOf:
              - $ref: "#/components/schemas/assistantToolsCode"
              - $ref: "#/components/schemas/assistantToolsFileSearch"
              - $ref: "#/components/schemas/assistantToolsFunction"
        tool_resources:
          type: object
          description: |
            A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
          properties:
            code_interpreter:
              type: object
              properties:
                file_ids:
                  type: array
                  description: |
                    A list of file IDs made available to the `code_interpreter`` tool. There can be a maximum of 20 files associated with the tool.
                  default: []
                  maxItems: 20
                  items:
                    type: string
            file_search:
              type: object
              properties:
                vector_store_ids:
                  type: array
                  description: |
                    The ID of the vector store attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.
                  maxItems: 1
                  items:
                    type: string
        metadata:
          description: &metadata_description |
            Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.
          type: object
          nullable: true
        temperature:
          description: &run_temperature_description |
            What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
          type: number
          minimum: 0
          maximum: 2
          default: 1
          example: 1
          nullable: true
        top_p:
          type: number
          minimum: 0
          maximum: 1
          default: 1
          example: 1
          nullable: true
          description: &run_top_p_description |
            An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.

            We generally recommend altering this or temperature but not both.
        response_format:
          $ref: "#/components/schemas/assistantsApiResponseFormatOption"
          nullable: true
      required:
        - id
        - object
        - created_at
        - name
        - description
        - model
        - instructions
        - tools
        - metadata

    createAssistantRequest:
      type: object
      additionalProperties: false
      properties:
        model:
          description: |
            ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
          anyOf:
            - type: string
        name:
          description: *assistant_name_param_description
          type: string
          nullable: true
          maxLength: 256
        description:
          description: *assistant_description_param_description
          type: string
          nullable: true
          maxLength: 512
        instructions:
          description: *assistant_instructions_param_description
          type: string
          nullable: true
          maxLength: 256000
        tools:
          description: *assistant_tools_param_description
          default: []
          type: array
          maxItems: 128
          items:
            oneOf:
              - $ref: "#/components/schemas/assistantToolsCode"
              - $ref: "#/components/schemas/assistantToolsFileSearch"
              - $ref: "#/components/schemas/assistantToolsFunction"
        tool_resources:
          type: object
          description: |
            A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
          properties:
            code_interpreter:
              type: object
              properties:
                file_ids:
                  type: array
                  description: |
                    A list of file IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
                  default: []
                  maxItems: 20
                  items:
                    type: string
            file_search:
              type: object
              properties:
                vector_store_ids:
                  type: array
                  description: |
                    The vector store attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.
                  maxItems: 1
                  items:
                    type: string
                vector_stores:
                  type: array
                  description: |
                    A helper to create a vector store with file_ids and attach it to this assistant. There can be a maximum of 1 vector store attached to the assistant.
                  maxItems: 1
                  items:
                    type: object
                    properties:
                      file_ids:
                        type: array
                        description: |
                          A list of file IDs to add to the vector store. There can be a maximum of 10000 files in a vector store.
                        maxItems: 10000
                        items:
                          type: string
                      chunking_strategy:
                        # Ideally we'd reuse the chunking strategy schema here, but it doesn't expand properly
                        type: object
                        description: The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.
                        oneOf:
                          - type: object
                            title: Auto Chunking Strategy
                            description: The default strategy. This strategy currently uses a `max_chunk_size_tokens` of `800` and `chunk_overlap_tokens` of `400`.
                            additionalProperties: false
                            properties:
                              type:
                                type: string
                                description: Always `auto`.
                                enum: ["auto"]
                                x-ms-enum:
                                  name: AutoChunkingStrategyType
                                  modelAsString: true
                                  values:
                                    - value: auto
                            required:
                              - type
                          - type: object
                            title: Static Chunking Strategy
                            additionalProperties: false
                            properties:
                              type:
                                type: string
                                description: Always `static`.
                                enum: ["static"]
                                x-ms-enum:
                                  name: StaticChunkingStrategyType
                                  modelAsString: true
                                  values:
                                    - value: static
                              static:
                                type: object
                                additionalProperties: false
                                properties:
                                  max_chunk_size_tokens:
                                    type: integer
                                    minimum: 100
                                    maximum: 4096
                                    description: The maximum number of tokens in each chunk. The default value is `800`. The minimum value is `100` and the maximum value is `4096`.
                                  chunk_overlap_tokens:
                                    type: integer
                                    description: |
                                      The number of tokens that overlap between chunks. The default value is `400`.

                                      Note that the overlap must not exceed half of `max_chunk_size_tokens`.
                                required:
                                  - max_chunk_size_tokens
                                  - chunk_overlap_tokens
                            required:
                              - type
                              - static
                      metadata:
                        type: object
                        description: |
                          Set of 16 key-value pairs that can be attached to a vector store. This can be useful for storing additional information about the vector store in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.
              oneOf:
                - required: [vector_store_ids]
                - required: [vector_stores]
          nullable: true
        metadata:
          description: *metadata_description
          type: object
          nullable: true
        temperature:
          description: *run_temperature_description
          type: number
          minimum: 0
          maximum: 2
          default: 1
          example: 1
          nullable: true
        top_p:
          type: number
          minimum: 0
          maximum: 1
          default: 1
          example: 1
          nullable: true
          description: *run_top_p_description
        response_format:
          $ref: "#/components/schemas/assistantsApiResponseFormatOption"
          nullable: true
      required:
        - model

    modifyAssistantRequest:
      type: object
      additionalProperties: false
      properties:
        model:
          description: |
            ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
          anyOf:
            - type: string
        name:
          description: |
            The name of the assistant. The maximum length is 256 characters.
          type: string
          nullable: true
          maxLength: 256
        description:
          description: |
            The description of the assistant. The maximum length is 512 characters.
          type: string
          nullable: true
          maxLength: 512
        instructions:
          description: |
            The system instructions that the assistant uses. The maximum length is 32768 characters.
          type: string
          nullable: true
          maxLength: 32768
        tools:
          description: |
            A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `retrieval`, or `function`.
          default: []
          type: array
          maxItems: 128
          items:
            oneOf:
              - $ref: "#/components/schemas/assistantToolsCode"
              - $ref: "#/components/schemas/assistantToolsFileSearch"
              - $ref: "#/components/schemas/assistantToolsFunction"
        tool_resources:
          type: object
          description: |
            A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
          properties:
            code_interpreter:
              type: object
              properties:
                file_ids:
                  type: array
                  description: |
                    Overrides the list of file IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
                  default: []
                  maxItems: 20
                  items:
                    type: string
            file_search:
              type: object
              properties:
                vector_store_ids:
                  type: array
                  description: |
                    Overrides the vector store attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.
                  maxItems: 1
                  items:
                    type: string
        metadata:
          description: *metadata_description
          type: object
          nullable: true
        temperature:
          description: *run_temperature_description
          type: number
          minimum: 0
          maximum: 2
          default: 1
          example: 1
          nullable: true
        top_p:
          type: number
          minimum: 0
          maximum: 1
          default: 1
          example: 1
          nullable: true
          description: *run_top_p_description
        response_format:
          $ref: "#/components/schemas/assistantsApiResponseFormatOption"
          nullable: true

    deleteAssistantResponse:
      type: object
      properties:
        id:
          type: string
        deleted:
          type: boolean
        object:
          type: string
          enum:
            - assistant.deleted
          x-ms-enum:
            name: DeleteAssistantResponseState
            modelAsString: true
            values:
              - value: assistant.deleted
      required:
        - id
        - object
        - deleted

    listAssistantsResponse:
      type: object
      properties:
        object:
          type: string
          example: list
        data:
          type: array
          items:
            $ref: "#/components/schemas/assistantObject"
        first_id:
          type: string
          example: asst_hLBK7PXBv5Lr2NQT7KLY0ag1
        last_id:
          type: string
          example: asst_QLoItBbqwyAJEzlTy4y9kOMM
        has_more:
          type: boolean
          example: false
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more

    assistantToolsCode:
      type: object
      title: Code interpreter tool
      properties:
        type:
          type: string
          description: "The type of tool being defined: `code_interpreter`"
          enum:
            - code_interpreter
          x-ms-enum:
            name: assistantToolsCodeType
            modelAsString: true
            values:
              - value: code_interpreter
      required:
        - type

    assistantToolsFileSearch:
      type: object
      title: FileSearch tool
      properties:
        type:
          type: string
          description: "The type of tool being defined: `file_search`"
          enum:
            - file_search
          x-ms-enum:
            name: assistantToolsFileSearchType
            modelAsString: true
            values:
              - value: file_search
        file_search:
          type: object
          description: Overrides for the file search tool.
          properties:
            max_num_results:
              type: integer
              minimum: 1
              maximum: 50
              description: |
                The maximum number of results the file search tool should output. The
                default is 20 for gpt-4* models and 5 for gpt-3.5-turbo. This number
                should be between 1 and 50 inclusive.


                Note that the file search tool may output fewer than `max_num_results`
                results.
    assistantToolsFileSearchTypeOnly:
      type: object
      title: FileSearch tool
      properties:
        type:
          type: string
          description: "The type of tool being defined: `file_search`"
          enum:
            - file_search
          x-ms-enum:
            name: assistantToolsFileSearchType
            modelAsString: true
            values:
              - value: file_search
      required:
        - type

    assistantToolsFunction:
      type: object
      title: Function tool
      properties:
        type:
          type: string
          description: "The type of tool being defined: `function`"
          enum:
            - function
          x-ms-enum:
            name: assistantToolsFunction
            modelAsString: true
            values:
              - value: function
        function:
          type: object
          description: The function definition.
          properties:
            description:
              type: string
              description: A description of what the function does, used by the model to choose when and how to call the function.
            name:
              type: string
              description: The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
            parameters:
              $ref: "#/components/schemas/chatCompletionFunctionParameters"
          required:
            - name
            - parameters
            - description
      required:
        - type
        - function

    truncationObject:
      type: object
      title: Thread Truncation Controls
      description: Controls for how a thread will be truncated prior to the run. Use this to control the intial context window of the run.
      properties:
        type:
          type: string
          description: The truncation strategy to use for the thread. The default is `auto`. If set to `last_messages`, the thread will be truncated to the n most recent messages in the thread. When set to `auto`, messages in the middle of the thread will be dropped to fit the context length of the model, `max_prompt_tokens`.
          enum: ["auto", "last_messages"]
          x-ms-enum:
            name: TruncationType
            modelAsString: true
            values:
              - value: auto
              - value: last_messages
        last_messages:
          type: integer
          description: The number of most recent messages from the thread when constructing the context for the run.
          minimum: 1
          nullable: true
      required:
        - type

    assistantsApiToolChoiceOption:
      description: |
        Controls which (if any) tool is called by the model.
        `none` means the model will not call any tools and instead generates a message.
        `auto` is the default value and means the model can pick between generating a message or calling a tool.
        Specifying a particular tool like `{"type": "file_search"}` or `{"type": "function", "function": {"name": "my_function"}}` forces the model to call that tool.
      oneOf:
        - type: string
          description: >
            `none` means the model will not call a function and instead generates a message.
            `auto` means the model can pick between generating a message or calling a function.
          enum: [none, auto]
          x-ms-enum:
            name: AssistantsApiToolChoiceOption
            modelAsString: true
            values:
              - value: none
              - value: auto
        - $ref: "#/components/schemas/assistantsNamedToolChoice"

    assistantsNamedToolChoice:
      type: object
      description: Specifies a tool the model should use. Use to force the model to call a specific tool.
      properties:
        type:
          type: string
          enum: ["function", "code_interpreter", "file_search"]
          description: The type of the tool. If type is `function`, the function name must be set
          x-ms-enum:
            name: AssistantsNamedToolChoiceType
            modelAsString: true
            values:
              - value: function
              - value: code_interpreter
              - value: file_search
        function:
          type: object
          properties:
            name:
              type: string
              description: The name of the function to call.
          required:
            - name
      required:
        - type

    runObject:
      type: object
      title: A run on a thread
      description: Represents an execution run on a [thread](/docs/api-reference/threads).
      properties:
        id:
          description: The identifier, which can be referenced in API endpoints.
          type: string
        object:
          description: The object type, which is always `thread.run`.
          type: string
          enum:
            - thread.run
          x-ms-enum:
            name: runObjectType
            modelAsString: true
            values:
              - value: thread.run
                description: The run object type which is always thread.run
        created_at:
          description: The Unix timestamp (in seconds) for when the run was created.
          type: integer
        thread_id:
          description: The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run.
          type: string
        assistant_id:
          description: The ID of the assistant used for execution of this run.
          type: string
        status:
          description: The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, or `expired`.
          type: string
          enum:
            - queued
            - in_progress
            - requires_action
            - cancelling
            - cancelled
            - failed
            - completed
            - expired
          x-ms-enum:
            name: RunObjectStatus
            modelAsString: true
            values:
              - value: queued
                description: The queued state
              - value: in_progress
                description: The in_progress state
              - value: requires_action
                description: The required_action state
              - value: cancelling
                description: The cancelling state
              - value: cancelled
                description: The cancelled state
              - value: failed
                description: The failed state
              - value: completed
                description: The completed state
              - value: expired
                description: The expired state
        required_action:
          type: object
          description: Details on the action required to continue the run. Will be `null` if no action is required.
          nullable: true
          properties:
            type:
              description: For now, this is always `submit_tool_outputs`.
              type: string
              enum:
                - submit_tool_outputs
            submit_tool_outputs:
              type: object
              description: Details on the tool outputs needed for this run to continue.
              properties:
                tool_calls:
                  type: array
                  description: A list of the relevant tool calls.
                  items:
                    $ref: "#/components/schemas/runToolCallObject"
              required:
                - tool_calls
          required:
            - type
            - submit_tool_outputs
        last_error:
          type: object
          description: The last error associated with this run. Will be `null` if there are no errors.
          nullable: true
          properties:
            code:
              type: string
              description: One of `server_error` or `rate_limit_exceeded`.
              enum:
                - server_error
                - rate_limit_exceeded
              x-ms-enum:
                name: LastErrorCode
                modelAsString: true
                values:
                  - value: server_error
                    description: The server failed to respond to request due to server error
                  - value: rate_limit_exceeded
                    description: The server failed to respond to request due to rate limit exceeded
            message:
              type: string
              description: A human-readable description of the error.
          required:
            - code
            - message
        expires_at:
          description: The Unix timestamp (in seconds) for when the run will expire.
          type: integer
        started_at:
          description: The Unix timestamp (in seconds) for when the run was started.
          type: integer
          nullable: true
        cancelled_at:
          description: The Unix timestamp (in seconds) for when the run was cancelled.
          type: integer
          nullable: true
        failed_at:
          description: The Unix timestamp (in seconds) for when the run failed.
          type: integer
          nullable: true
        completed_at:
          description: The Unix timestamp (in seconds) for when the run was completed.
          type: integer
          nullable: true
        incomplete_details:
          description: Details on why the run is incomplete. Will be `null` if the run is not incomplete.
          type: object
          nullable: true
          properties:
            reason:
              description: The reason why the run is incomplete. This will point to which specific token limit was reached over the course of the run.
              type: string
              enum: ["max_completion_tokens", "max_prompt_tokens"]
              x-ms-enum:
                name: IncompleteDetailsReason
                modelAsString: true
                values:
                  - value: max_completion_tokens
                  - value: max_prompt_tokens
        model:
          description: The model that the assistant used for this run.
          type: string
        instructions:
          description: The instructions that the assistant used for this run.
          type: string
        tools:
          description: The list of tools that the assistant used for this run.
          default: []
          type: array
          maxItems: 20
          items:
            oneOf:
              - $ref: "#/components/schemas/assistantToolsCode"
              - $ref: "#/components/schemas/assistantToolsFileSearch"
              - $ref: "#/components/schemas/assistantToolsFunction"
        metadata:
          description: *metadata_description
          type: object
          nullable: true
        usage:
          $ref: "#/components/schemas/runCompletionUsage"
        temperature:
          description: The sampling temperature used for this run. If not set, defaults to 1.
          type: number
          nullable: true
        top_p:
          description: The nucleus sampling value used for this run. If not set, defaults to 1.
          type: number
          nullable: true
        max_prompt_tokens:
          type: integer
          nullable: true
          description: |
            The maximum number of prompt tokens specified to have been used over the course of the run.
          minimum: 256
        max_completion_tokens:
          type: integer
          nullable: true
          description: |
            The maximum number of completion tokens specified to have been used over the course of the run.
          minimum: 256
        truncation_strategy:
          $ref: "#/components/schemas/truncationObject"
          nullable: true
        tool_choice:
          $ref: "#/components/schemas/assistantsApiToolChoiceOption"
          nullable: true
        parallel_tool_calls:
          $ref: "#/components/schemas/ParallelToolCalls"
        response_format:
          $ref: "#/components/schemas/assistantsApiResponseFormatOption"
          nullable: true
      required:
        - id
        - object
        - created_at
        - thread_id
        - assistant_id
        - status
        - required_action
        - last_error
        - expires_at
        - started_at
        - cancelled_at
        - failed_at
        - completed_at
        - model
        - instructions
        - tools
        - metadata
        - usage
        - incomplete_details
        - max_prompt_tokens
        - max_completion_tokens
        - truncation_strategy
        - tool_choice
        - response_format

    createRunRequest:
      type: object
      additionalProperties: false
      properties:
        assistant_id:
          description: The ID of the assistant to use to execute this run.
          type: string
        model:
          description: The ID of the Model to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.
          type: string
          nullable: true
        instructions:
          description: Override the default system message of the assistant. This is useful for modifying the behavior on a per-run basis.
          type: string
          nullable: true
        additional_instructions:
          description: Appends additional instructions at the end of the instructions for the run. This is useful for modifying the behavior on a per-run basis without overriding other instructions.
          type: string
          nullable: true
        additional_messages:
          description: Adds additional messages to the thread before creating the run.
          type: array
          items:
            $ref: "#/components/schemas/createMessageRequest"
          nullable: true
        tools:
          description: Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.
          nullable: true
          type: array
          maxItems: 20
          items:
            oneOf:
              - $ref: "#/components/schemas/assistantToolsCode"
              - $ref: "#/components/schemas/assistantToolsFileSearch"
              - $ref: "#/components/schemas/assistantToolsFunction"
        metadata:
          description: *metadata_description
          type: object
          nullable: true
        temperature:
          type: number
          minimum: 0
          maximum: 2
          default: 1
          example: 1
          nullable: true
          description: *run_temperature_description
        top_p:
          type: number
          minimum: 0
          maximum: 1
          default: 1
          example: 1
          nullable: true
          description: *run_top_p_description
        stream:
          type: boolean
          nullable: true
          description: |
            If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.
        max_prompt_tokens:
          type: integer
          nullable: true
          description: |
            The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
          minimum: 256
        max_completion_tokens:
          type: integer
          nullable: true
          description: |
            The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
          minimum: 256
        truncation_strategy:
          $ref: "#/components/schemas/truncationObject"
          nullable: true
        tool_choice:
          $ref: "#/components/schemas/assistantsApiToolChoiceOption"
          nullable: true
        parallel_tool_calls:
          $ref: "#/components/schemas/ParallelToolCalls"
        response_format:
          $ref: "#/components/schemas/assistantsApiResponseFormatOption"
          nullable: true
      required:
        - thread_id
        - assistant_id

    listRunsResponse:
      type: object
      properties:
        object:
          type: string
          example: list
        data:
          type: array
          items:
            $ref: "#/components/schemas/runObject"
        first_id:
          type: string
          example: run_hLBK7PXBv5Lr2NQT7KLY0ag1
        last_id:
          type: string
          example: run_QLoItBbqwyAJEzlTy4y9kOMM
        has_more:
          type: boolean
          example: false
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more

    modifyRunRequest:
      type: object
      additionalProperties: false
      properties:
        metadata:
          description: *metadata_description
          type: object
          nullable: true

    submitToolOutputsRunRequest:
      type: object
      additionalProperties: false
      properties:
        tool_outputs:
          description: A list of tools for which the outputs are being submitted.
          type: array
          items:
            type: object
            properties:
              tool_call_id:
                type: string
                description: The ID of the tool call in the `required_action` object within the run object the output is being submitted for.
              output:
                type: string
                description: The output of the tool call to be submitted to continue the run.
        stream:
          type: boolean
          nullable: true
          description: |
            If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.
      required:
        - tool_outputs

    runToolCallObject:
      type: object
      description: Tool call objects
      properties:
        id:
          type: string
          description: The ID of the tool call. This ID must be referenced when you submit the tool outputs in using the [Submit tool outputs to run](/docs/api-reference/runs/submitToolOutputs) endpoint.
        type:
          type: string
          description: The type of tool call the output is required for. For now, this is always `function`.
          enum:
            - function
          x-ms-enum:
            name: RunToolCallObjectType
            modelAsString: true
            values:
              - value: function
        function:
          type: object
          description: The function definition.
          properties:
            name:
              type: string
              description: The name of the function.
            arguments:
              type: string
              description: The arguments that the model expects you to pass to the function.
          required:
            - name
            - arguments
      required:
        - id
        - type
        - function

    createThreadAndRunRequest:
      type: object
      additionalProperties: false
      properties:
        assistant_id:
          description: The ID of the assistant to use to execute this run.
          type: string
        thread:
          $ref: "#/components/schemas/createThreadRequest"
          description: If no thread is provided, an empty thread will be created.
        model:
          description: The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.
          type: string
          nullable: true
        instructions:
          description: Override the default system message of the assistant. This is useful for modifying the behavior on a per-run basis.
          type: string
          nullable: true
        tools:
          description: Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.
          nullable: true
          type: array
          maxItems: 20
          items:
            oneOf:
              - $ref: "#/components/schemas/assistantToolsCode"
              - $ref: "#/components/schemas/assistantToolsFileSearch"
              - $ref: "#/components/schemas/assistantToolsFunction"
        tool_resources:
          type: object
          description: |
            A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
          properties:
            code_interpreter:
              type: object
              properties:
                file_ids:
                  type: array
                  description: |
                    A list of file IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
                  default: []
                  maxItems: 20
                  items:
                    type: string
            file_search:
              type: object
              properties:
                vector_store_ids:
                  type: array
                  description: |
                    The ID of the vector store attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.
                  maxItems: 1
                  items:
                    type: string
          nullable: true
        metadata:
          description: *metadata_description
          type: object
          nullable: true
        temperature:
          type: number
          minimum: 0
          maximum: 2
          default: 1
          example: 1
          nullable: true
          description: *run_temperature_description
        top_p:
          type: number
          minimum: 0
          maximum: 1
          default: 1
          example: 1
          nullable: true
          description: *run_top_p_description
        stream:
          type: boolean
          nullable: true
          description: |
            If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.
        max_prompt_tokens:
          type: integer
          nullable: true
          description: |
            The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
          minimum: 256
        max_completion_tokens:
          type: integer
          nullable: true
          description: |
            The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
          minimum: 256
        truncation_strategy:
          $ref: "#/components/schemas/truncationObject"
          nullable: true
        tool_choice:
          $ref: "#/components/schemas/assistantsApiToolChoiceOption"
          nullable: true
        parallel_tool_calls:
          $ref: "#/components/schemas/ParallelToolCalls"
        response_format:
          $ref: "#/components/schemas/assistantsApiResponseFormatOption"
          nullable: true
      required:
        - thread_id
        - assistant_id

    threadObject:
      type: object
      title: Thread
      description: Represents a thread that contains [messages](/docs/api-reference/messages).
      properties:
        id:
          description: The identifier, which can be referenced in API endpoints.
          type: string
        object:
          description: The object type, which is always `thread`.
          type: string
          enum:
            - thread
          x-ms-enum:
            name: ThreadObjectType
            modelAsString: true
            values:
              - value: thread
                description: The type of thread object which is always `thread`
        created_at:
          description: The Unix timestamp (in seconds) for when the thread was created.
          type: integer
        tool_resources:
          type: object
          description: |
            A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
          properties:
            code_interpreter:
              type: object
              properties:
                file_ids:
                  type: array
                  description: |
                    A list of file IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
                  default: []
                  maxItems: 20
                  items:
                    type: string
            file_search:
              type: object
              properties:
                vector_store_ids:
                  type: array
                  description: |
                    The vector store attached to this thread. There can be a maximum of 1 vector store attached to the thread.
                  maxItems: 1
                  items:
                    type: string
          nullable: true
        metadata:
          description: *metadata_description
          type: object
          nullable: true
      required:
        - id
        - object
        - created_at
        - tool_resources
        - metadata

    createThreadRequest:
      type: object
      additionalProperties: false
      properties:
        messages:
          description: A list of messages to start the thread with.
          type: array
          items:
            $ref: "#/components/schemas/createMessageRequest"
        tool_resources:
          type: object
          description: |
            A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
          properties:
            code_interpreter:
              type: object
              properties:
                file_ids:
                  type: array
                  description: |
                    A list of file IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
                  default: []
                  maxItems: 20
                  items:
                    type: string
            file_search:
              type: object
              properties:
                vector_store_ids:
                  type: array
                  description: |
                    The vector store attached to this thread. There can be a maximum of 1 vector store attached to the thread.
                  maxItems: 1
                  items:
                    type: string
                vector_stores:
                  type: array
                  description: |
                    A helper to create a vector store with file_ids and attach it to this thread. There can be a maximum of 1 vector store attached to the thread.
                  maxItems: 1
                  items:
                    type: object
                    properties:
                      file_ids:
                        type: array
                        description: |
                          A list of file IDs to add to the vector store. There can be a maximum of 10000 files in a vector store.
                        maxItems: 10000
                        items:
                          type: string
                      chunking_strategy:
                        # Ideally we'd reuse the chunking strategy schema here, but it doesn't expand properly
                        type: object
                        description: The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.
                        oneOf:
                          - type: object
                            title: Auto Chunking Strategy
                            description: The default strategy. This strategy currently uses a `max_chunk_size_tokens` of `800` and `chunk_overlap_tokens` of `400`.
                            additionalProperties: false
                            properties:
                              type:
                                type: string
                                description: Always `auto`.
                                enum: ["auto"]
                                x-ms-enum:
                                  name: AutoChunkingStrategyType
                                  modelAsString: true
                                  values:
                                    - value: auto
                            required:
                              - type
                          - type: object
                            title: Static Chunking Strategy
                            additionalProperties: false
                            properties:
                              type:
                                type: string
                                description: Always `static`.
                                enum: ["static"]
                                x-ms-enum:
                                  name: StaticChunkingStrategyType
                                  modelAsString: true
                                  values:
                                    - value: static
                              static:
                                type: object
                                additionalProperties: false
                                properties:
                                  max_chunk_size_tokens:
                                    type: integer
                                    minimum: 100
                                    maximum: 4096
                                    description: The maximum number of tokens in each chunk. The default value is `800`. The minimum value is `100` and the maximum value is `4096`.
                                  chunk_overlap_tokens:
                                    type: integer
                                    description: |
                                      The number of tokens that overlap between chunks. The default value is `400`.

                                      Note that the overlap must not exceed half of `max_chunk_size_tokens`.
                                required:
                                  - max_chunk_size_tokens
                                  - chunk_overlap_tokens
                            required:
                              - type
                              - static
                      metadata:
                        type: object
                        description: |
                          Set of 16 key-value pairs that can be attached to a vector store. This can be useful for storing additional information about the vector store in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.
              oneOf:
                - required: [vector_store_ids]
                - required: [vector_stores]
          nullable: true
        metadata:
          description: *metadata_description
          type: object
          nullable: true

    modifyThreadRequest:
      type: object
      additionalProperties: false
      properties:
        tool_resources:
          type: object
          description: |
            A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
          properties:
            code_interpreter:
              type: object
              properties:
                file_ids:
                  type: array
                  description: |
                    A list of File IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
                  default: []
                  maxItems: 20
                  items:
                    type: string
            file_search:
              type: object
              properties:
                vector_store_ids:
                  type: array
                  description: |
                    The vector store attached to this thread. There can be a maximum of 1 vector store attached to the thread.
                  maxItems: 1
                  items:
                    type: string
          nullable: true
        metadata:
          description: *metadata_description
          type: object
          nullable: true

    deleteThreadResponse:
      type: object
      properties:
        id:
          type: string
        deleted:
          type: boolean
        object:
          type: string
          enum:
            - thread.deleted
          x-ms-enum:
            name: DeleteThreadResponseObjectState
            modelAsString: true
            values:
              - value: thread.deleted
                description: The delete thread response object state which is `thread.deleted`
      required:
        - id
        - object
        - deleted

    messageObject:
      type: object
      title: The message object
      description: Represents a message within a [thread](/docs/api-reference/threads).
      properties:
        id:
          description: The identifier, which can be referenced in API endpoints.
          type: string
        object:
          description: The object type, which is always `thread.message`.
          type: string
          enum:
            - thread.message
          x-ms-enum:
            name: MessageObjectType
            modelAsString: true
            values:
              - value: thread.message
                description: The message object type which is `thread.message`
        created_at:
          description: The Unix timestamp (in seconds) for when the message was created.
          type: integer
        thread_id:
          description: The [thread](/docs/api-reference/threads) ID that this message belongs to.
          type: string
        status:
          description: The status of the message, which can be either `in_progress`, `incomplete`, or `completed`.
          type: string
          enum: ["in_progress", "incomplete", "completed"]
          x-ms-enum:
            name: MessageObjectStatus
            modelAsString: true
            values:
              - value: in_progress
              - value: incomplete
              - value: completed
        incomplete_details:
          description: On an incomplete message, details about why the message is incomplete.
          type: object
          properties:
            reason:
              type: string
              description: The reason the message is incomplete.
              enum:
                [
                  "content_filter",
                  "max_tokens",
                  "run_cancelled",
                  "run_expired",
                  "run_failed",
                ]
              x-ms-enum:
                name: MessageObjectIncompleteReason
                modelAsString: true
                values:
                  - value: content_filter
                  - value: max_tokens
                  - value: run_cancelled
                  - value: run_expired
                  - value: run_failed
          nullable: true
          required:
            - reason
        completed_at:
          description: The Unix timestamp (in seconds) for when the message was completed.
          type: integer
          nullable: true
        incomplete_at:
          description: The Unix timestamp (in seconds) for when the message was marked as incomplete.
          type: integer
          nullable: true
        role:
          description: The entity that produced the message. One of `user` or `assistant`.
          type: string
          enum:
            - user
            - assistant
          x-ms-enum:
            name: MessageObjectRole
            modelAsString: true
            values:
              - value: user
              - value: assistant
        content:
          description: The content of the message in array of text and/or images.
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/messageContentImageFileObject"
              - $ref: "#/components/schemas/messageContentTextObject"
        assistant_id:
          description: If applicable, the ID of the assistant that authored this message.
          type: string
          nullable: true
        run_id:
          description: If applicable, the ID of the [run](/docs/api-reference/runs) associated with the authoring of this message.
          type: string
          nullable: true
        attachments:
          type: array
          items:
            type: object
            properties:
              file_id:
                type: string
                description: The ID of the file to attach to the message.
              tools:
                description: The tools to add this file to.
                type: array
                items:
                  oneOf:
                    - $ref: "#/components/schemas/assistantToolsCode"
                    - $ref: "#/components/schemas/assistantToolsFileSearchTypeOnly"
          description: A list of files attached to the message, and the tools they were added to.
          nullable: true
        metadata:
          description: *metadata_description
          type: object
          nullable: true
      required:
        - id
        - object
        - created_at
        - thread_id
        - status
        - incomplete_details
        - completed_at
        - incomplete_at
        - role
        - content
        - assistant_id
        - run_id
        - attachments
        - metadata

    createMessageRequest:
      type: object
      additionalProperties: false
      required:
        - role
        - content
      properties:
        role:
          type: string
          enum:
            - user
            - assistant
          x-ms-enum:
            name: CreateMessageRequestRole
            modelAsString: true
            values:
              - value: user
              - value: assistant
          description: |
            The role of the entity that is creating the message. Allowed values include:
            - `user`: Indicates the message is sent by an actual user and should be used in most cases to represent user-generated messages.
            - `assistant`: Indicates the message is generated by the assistant. Use this value to insert messages from the assistant into the conversation.
        content:
          type: string
          minLength: 1
          maxLength: 256000
          description: The content of the message.
        attachments:
          type: array
          items:
            type: object
            properties:
              file_id:
                type: string
                description: The ID of the file to attach to the message.
              tools:
                description: The tools to add this file to.
                type: array
                items:
                  oneOf:
                    - $ref: "#/components/schemas/assistantToolsCode"
                    - $ref: "#/components/schemas/assistantToolsFileSearchTypeOnly"
                  x-oaiExpandable: true
          description: A list of files attached to the message, and the tools they should be added to.
          required:
            - file_id
            - tools
          nullable: true
        metadata:
          description: *metadata_description
          type: object
          nullable: true
    modifyMessageRequest:
      type: object
      additionalProperties: false
      properties:
        metadata:
          description: *metadata_description
          type: object
          nullable: true
    listMessagesResponse:
      properties:
        object:
          type: string
          example: list
        data:
          type: array
          items:
            $ref: "#/components/schemas/messageObject"
        first_id:
          type: string
          example: msg_hLBK7PXBv5Lr2NQT7KLY0ag1
        last_id:
          type: string
          example: msg_QLoItBbqwyAJEzlTy4y9kOMM
        has_more:
          type: boolean
          example: false
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more

    messageContentImageFileObject:
      title: Image file
      type: object
      description: References an image file in the content of a message.
      properties:
        type:
          description: Always `image_file`.
          type: string
          enum:
            - image_file
          x-ms-enum:
            name: MessageContentImageFileObjectType
            modelAsString: true
            values:
              - value: image_file
                description: The message content image file type
        image_file:
          type: object
          properties:
            file_id:
              description: The file ID of the image in the message content.
              type: string
          required:
            - file_id
      required:
        - type
        - image_file

    messageContentTextObject:
      title: Text
      type: object
      description: The text content that is part of a message.
      properties:
        type:
          description: Always `text`.
          type: string
          enum:
            - text
          x-ms-enum:
            name: messageContentTextObjectType
            modelAsString: true
            values:
              - value: text
                description: The message content text Object type
        text:
          type: object
          properties:
            value:
              description: The data that makes up the text.
              type: string
            annotations:
              type: array
              items:
                oneOf:
                  - $ref: "#/components/schemas/messageContentTextAnnotationsFileCitationObject"
                  - $ref: "#/components/schemas/messageContentTextAnnotationsFilePathObject"
          required:
            - value
            - annotations
      required:
        - type
        - text

    messageContentTextAnnotationsFileCitationObject:
      title: File citation
      type: object
      description: A citation within the message that points to a specific quote from a specific File associated with the assistant or the message. Generated when the assistant uses the "retrieval" tool to search files.
      properties:
        type:
          description: Always `file_citation`.
          type: string
          enum:
            - file_citation
          x-ms-enum:
            name: FileCitationObjectType
            modelAsString: true
            values:
              - value: file_citation
                description: The file citation object type
        text:
          description: The text in the message content that needs to be replaced.
          type: string
        file_citation:
          type: object
          properties:
            file_id:
              description: The ID of the specific File the citation is from.
              type: string
          required:
            - file_id
        start_index:
          type: integer
          minimum: 0
        end_index:
          type: integer
          minimum: 0
      required:
        - type
        - text
        - file_citation
        - start_index
        - end_index

    messageContentTextAnnotationsFilePathObject:
      title: File path
      type: object
      description: A URL for the file that's generated when the assistant used the `code_interpreter` tool to generate a file.
      properties:
        type:
          description: Always `file_path`.
          type: string
          enum:
            - file_path
          x-ms-enum:
            name: FilePathObjectType
            modelAsString: true
            values:
              - value: file_path
                description: The file path object type
        text:
          description: The text in the message content that needs to be replaced.
          type: string
        file_path:
          type: object
          properties:
            file_id:
              description: The ID of the file that was generated.
              type: string
          required:
            - file_id
        start_index:
          type: integer
          minimum: 0
        end_index:
          type: integer
          minimum: 0
      required:
        - type
        - text
        - file_path
        - start_index
        - end_index

    runStepObject:
      type: object
      title: Run steps
      description: |
        Represents a step in execution of a run.
      properties:
        id:
          description: The identifier of the run step, which can be referenced in API endpoints.
          type: string
        object:
          description: The object type, which is always `assistant.run.step``.
          type: string
          enum:
            - assistant.run.step
          x-ms-enum:
            name: RunStepObjectType
            modelAsString: true
            values:
              - value: assistant.run.step
                description: The object type, which is always `assistant.run.step`
        created_at:
          description: The Unix timestamp (in seconds) for when the run step was created.
          type: integer
        assistant_id:
          description: The ID of the assistant associated with the run step.
          type: string
        thread_id:
          description: The ID of the [thread](/docs/api-reference/threads) that was run.
          type: string
        run_id:
          description: The ID of the [run](/docs/api-reference/runs) that this run step is a part of.
          type: string
        type:
          description: The type of run step, which can be either `message_creation` or `tool_calls`.
          type: string
          enum:
            - message_creation
            - tool_calls
          x-ms-enum:
            name: RunStepObjectType
            modelAsString: true
            values:
              - value: message_creation
                description: The message_creation run step
              - value: tool_calls
                description: The tool_calls run step
        status:
          description: The status of the run, which can be either `in_progress`, `cancelled`, `failed`, `completed`, or `expired`.
          type: string
          enum:
            - in_progress
            - cancelled
            - failed
            - completed
            - expired
          x-ms-enum:
            name: RunStepObjectStatus
            modelAsString: true
            values:
              - value: in_progress
                description: The in_progress run status
              - value: cancelled
                description: The cancelled run status
              - value: failed
                description: The cancelled run status
              - value: completed
                description: The cancelled run status
              - value: expired
                description: The cancelled run status
        step_details:
          type: object
          description: The details of the run step.
          oneOf:
            - $ref: "#/components/schemas/runStepDetailsMessageCreationObject"
            - $ref: "#/components/schemas/runStepDetailsToolCallsObject"
        last_error:
          type: object
          description: The last error associated with this run step. Will be `null` if there are no errors.
          nullable: true
          properties:
            code:
              type: string
              description: One of `server_error` or `rate_limit_exceeded`.
              enum:
                - server_error
                - rate_limit_exceeded
              x-ms-enum:
                name: LastErrorCode
                modelAsString: true
                values:
                  - value: server_error
                    description: The server_error
                  - value: rate_limit_exceeded
                    description: The rate_limit_exceeded status
            message:
              type: string
              description: A human-readable description of the error.
          required:
            - code
            - message
        expired_at:
          description: The Unix timestamp (in seconds) for when the run step expired. A step is considered expired if the parent run is expired.
          type: integer
          nullable: true
        cancelled_at:
          description: The Unix timestamp (in seconds) for when the run step was cancelled.
          type: integer
          nullable: true
        failed_at:
          description: The Unix timestamp (in seconds) for when the run step failed.
          type: integer
          nullable: true
        completed_at:
          description: The Unix timestamp (in seconds) for when the run step completed.
          type: integer
          nullable: true
        metadata:
          description: *metadata_description
          type: object
          nullable: true
      required:
        - id
        - object
        - created_at
        - assistant_id
        - thread_id
        - run_id
        - type
        - status
        - step_details
        - last_error
        - expired_at
        - cancelled_at
        - failed_at
        - completed_at
        - metadata

    listRunStepsResponse:
      properties:
        object:
          type: string
          example: list
        data:
          type: array
          items:
            $ref: "#/components/schemas/runStepObject"
        first_id:
          type: string
          example: step_hLBK7PXBv5Lr2NQT7KLY0ag1
        last_id:
          type: string
          example: step_QLoItBbqwyAJEzlTy4y9kOMM
        has_more:
          type: boolean
          example: false
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more

    runStepDetailsMessageCreationObject:
      title: Message creation
      type: object
      description: Details of the message creation by the run step.
      properties:
        type:
          description: Always `message_creation``.
          type: string
          enum:
            - message_creation
          x-ms-enum:
            name: RunStepDetailsMessageCreationObjectType
            modelAsString: true
            values:
              - value: message_creation
        message_creation:
          type: object
          properties:
            message_id:
              type: string
              description: The ID of the message that was created by this run step.
          required:
            - message_id
      required:
        - type
        - message_creation

    runStepDetailsToolCallsObject:
      title: Tool calls
      type: object
      description: Details of the tool call.
      properties:
        type:
          description: Always `tool_calls`.
          type: string
          enum:
            - tool_calls
          x-ms-enum:
            name: RunStepDetailsToolCallsObjectType
            modelAsString: true
            values:
              - value: tool_calls
        tool_calls:
          type: array
          description: |
            An array of tool calls the run step was involved in. These can be associated with one of three types of tools: `code_interpreter`, `retrieval` or `function`.
          items:
            type: object
            oneOf:
              - $ref: "#/components/schemas/runStepDetailsToolCallsCodeObject"
              - $ref: "#/components/schemas/runStepDetailsToolCallsFileSearchObject"
              - $ref: "#/components/schemas/runStepDetailsToolCallsFunctionObject"
      required:
        - type
        - tool_calls

    runStepDetailsToolCallsCodeObject:
      title: Code interpreter tool call
      type: object
      description: Details of the Code Interpreter tool call the run step was involved in.
      properties:
        id:
          type: string
          description: The ID of the tool call.
        type:
          type: string
          description: The type of tool call. This is always going to be `code_interpreter` for this type of tool call.
          enum:
            - code_interpreter
          x-ms-enum:
            name: RunStepDetailsToolCallsCodeObjectType
            modelAsString: true
            values:
              - value: code_interpreter
        code_interpreter:
          type: object
          description: The Code Interpreter tool call definition.
          required:
            - input
            - outputs
          properties:
            input:
              type: string
              description: The input to the Code Interpreter tool call.
            outputs:
              type: array
              description: The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (`logs`) or images (`image`). Each of these are represented by a different object type.
              items:
                type: object
                oneOf:
                  - $ref: "#/components/schemas/runStepDetailsToolCallsCodeOutputLogsObject"
                  - $ref: "#/components/schemas/runStepDetailsToolCallsCodeOutputImageObject"
      required:
        - id
        - type
        - code_interpreter

    runStepDetailsToolCallsCodeOutputLogsObject:
      title: Code interpreter log output
      type: object
      description: Text output from the Code Interpreter tool call as part of a run step.
      properties:
        type:
          description: Always `logs`.
          type: string
          enum:
            - logs
          x-ms-enum:
            name: RunStepDetailsToolCallsCodeOutputLogsObjectType
            modelAsString: true
            values:
              - value: logs
        logs:
          type: string
          description: The text output from the Code Interpreter tool call.
      required:
        - type
        - logs

    runStepDetailsToolCallsCodeOutputImageObject:
      title: Code interpreter image output
      type: object
      properties:
        type:
          description: Always `image`.
          type: string
          enum:
            - image
          x-ms-enum:
            name: RunStepDetailsToolCallsCodeOutputImageObjectType
            modelAsString: true
            values:
              - value: image
        image:
          type: object
          properties:
            file_id:
              description: The file ID of the image.
              type: string
          required:
            - file_id
      required:
        - type
        - image

    runStepDetailsToolCallsFileSearchObject:
      title: File search tool call
      type: object
      properties:
        id:
          type: string
          description: The ID of the tool call object.
        type:
          type: string
          description: The type of tool call. This is always going to be `file_search` for this type of tool call.
          enum: ["file_search"]
          x-ms-enum:
            name: RunStepDetailsToolCallsFileSearchObjectType
            modelAsString: true
            values:
              - value: file_search
        file_search:
          type: object
          description: For now, this is always going to be an empty object.
          properties:
            results:
              type: array
              description: The results of the file search.
              items:
                $ref: "#/components/schemas/runStepDetailsToolCallsFileSearchResultObject"
      required:
        - id
        - type
        - file_search

    runStepDetailsToolCallsFileSearchResultObject:
      title: File search tool call result
      type: object
      description: A result instance of the file search.
      x-oaiTypeLabel: map
      properties:
        file_id:
          type: string
          description: The ID of the file that result was found in.
        file_name:
          type: string
          description: The name of the file that result was found in.
        score:
          type: number
          description: The score of the result. All values must be a floating point number between 0 and 1.
          minimum: 0
          maximum: 1
        content:
          type: array
          description: The content of the result that was found. The content is only included if requested via the include query parameter.
          items:
            type: object
            properties:
              type:
                type: string
                description: The type of the content.
                enum: ["text"]
              text:
                type: string
                description: The text content of the file.
      required:
        - file_id
        - file_name
        - score

    runStepDetailsToolCallsFunctionObject:
      type: object
      title: Function tool call
      properties:
        id:
          type: string
          description: The ID of the tool call object.
        type:
          type: string
          description: The type of tool call. This is always going to be `function` for this type of tool call.
          enum:
            - function
          x-ms-enum:
            name: RunStepDetailsToolCallsFunctionObjectType
            modelAsString: true
            values:
              - value: function
        function:
          type: object
          description: The definition of the function that was called.
          properties:
            name:
              type: string
              description: The name of the function.
            arguments:
              type: string
              description: The arguments passed to the function.
            output:
              type: string
              description: The output of the function. This will be `null` if the outputs have not been [submitted](/docs/api-reference/runs/submitToolOutputs) yet.
              nullable: true
          required:
            - name
            - arguments
            - output
      required:
        - id
        - type
        - function

    vectorStoreExpirationAfter:
      type: object
      title: Vector store expiration policy
      description: The expiration policy for a vector store.
      properties:
        anchor:
          description: "Anchor timestamp after which the expiration policy applies. Supported anchors: `last_active_at`."
          type: string
          enum: ["last_active_at"]
          x-ms-enum:
            name: VectorStoreExpirationAfterAnchor
            modelAsString: true
            values:
              - value: last_active_at
                description: The anchor timestamp after which the expiration policy applies.
        days:
          description: The number of days after the anchor time that the vector store will expire.
          type: integer
          minimum: 1
          maximum: 365
      required:
        - anchor
        - days

    vectorStoreObject:
      type: object
      title: Vector store
      description: A vector store is a collection of processed files can be used by the `file_search` tool.
      properties:
        id:
          description: The identifier, which can be referenced in API endpoints.
          type: string
        object:
          description: The object type, which is always `vector_store`.
          type: string
          enum: ["vector_store"]
        created_at:
          description: The Unix timestamp (in seconds) for when the vector store was created.
          type: integer
        name:
          description: The name of the vector store.
          type: string
        usage_bytes:
          description: The total number of bytes used by the files in the vector store.
          type: integer
        file_counts:
          type: object
          properties:
            in_progress:
              description: The number of files that are currently being processed.
              type: integer
            completed:
              description: The number of files that have been successfully processed.
              type: integer
            failed:
              description: The number of files that have failed to process.
              type: integer
            cancelled:
              description: The number of files that were cancelled.
              type: integer
            total:
              description: The total number of files.
              type: integer
          required:
            - in_progress
            - completed
            - failed
            - cancelled
            - total
        status:
          description: The status of the vector store, which can be either `expired`, `in_progress`, or `completed`. A status of `completed` indicates that the vector store is ready for use.
          type: string
          enum: ["expired", "in_progress", "completed"]
          x-ms-enum:
            name: VectorStoreObjectStatus
            modelAsString: true
            values:
              - value: expired
              - value: in_progress
              - value: completed
        expires_after:
          $ref: "#/components/schemas/vectorStoreExpirationAfter"
        expires_at:
          description: The Unix timestamp (in seconds) for when the vector store will expire.
          type: integer
          nullable: true
        last_active_at:
          description: The Unix timestamp (in seconds) for when the vector store was last active.
          type: integer
          nullable: true
        metadata:
          description: *metadata_description
          type: object
          nullable: true
      required:
        - id
        - object
        - usage_bytes
        - created_at
        - status
        - last_active_at
        - name
        - bytes
        - file_counts
        - metadata

    createVectorStoreRequest:
      type: object
      additionalProperties: false
      properties:
        file_ids:
          description: A list of file IDs that the vector store should use. Useful for tools like `file_search` that can access files.
          type: array
          maxItems: 500
          items:
            type: string
        name:
          description: The name of the vector store.
          type: string
        expires_after:
          $ref: "#/components/schemas/vectorStoreExpirationAfter"
        chunking_strategy:
          type: object
          description: >-
            The chunking strategy used to chunk the file(s). If not set, will use the
            `auto` strategy. Only applicable if `file_ids` is non-empty.
          oneOf:
            - $ref: "#/components/schemas/autoChunkingStrategyRequestParam"
            - $ref: "#/components/schemas/staticChunkingStrategyRequestParam"
        metadata:
          description: *metadata_description
          type: object
          nullable: true

    updateVectorStoreRequest:
      type: object
      additionalProperties: false
      properties:
        name:
          description: The name of the vector store.
          type: string
          nullable: true
        expires_after:
          $ref: "#/components/schemas/vectorStoreExpirationAfter"
          nullable: true
        metadata:
          description: *metadata_description
          type: object
          nullable: true

    listVectorStoresResponse:
      properties:
        object:
          type: string
          example: "list"
        data:
          type: array
          items:
            $ref: "#/components/schemas/vectorStoreObject"
        first_id:
          type: string
          example: "vs_abc123"
        last_id:
          type: string
          example: "vs_abc456"
        has_more:
          type: boolean
          example: false
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more

    deleteVectorStoreResponse:
      type: object
      properties:
        id:
          type: string
        deleted:
          type: boolean
        object:
          type: string
          enum: [vector_store.deleted]
          x-ms-enum:
            name: DeleteVectorStoreResponseObject
            modelAsString: true
            values:
              - value: vector_store.deleted
                description: The delete vector store response object state
      required:
        - id
        - object
        - deleted

    vectorStoreFileObject:
      type: object
      title: Vector store files
      description: A list of files attached to a vector store.
      properties:
        id:
          description: The identifier, which can be referenced in API endpoints.
          type: string
        object:
          description: The object type, which is always `vector_store.file`.
          type: string
          enum: ["vector_store.file"]
          x-ms-enum:
            name: VectorStoreFileObjectType
            modelAsString: true
            values:
              - value: vector_store.file
        usage_bytes:
          description: The total vector store usage in bytes. Note that this may be different from the original file size.
          type: integer
        created_at:
          description: The Unix timestamp (in seconds) for when the vector store file was created.
          type: integer
        vector_store_id:
          description: The ID of the vector store that the file is attached to.
          type: string
        status:
          description: The status of the vector store file, which can be either `in_progress`, `completed`, `cancelled`, or `failed`. The status `completed` indicates that the vector store file is ready for use.
          type: string
          enum: ["in_progress", "completed", "cancelled", "failed"]
          x-ms-enum:
            name: VectorStoreFileObjectStatus
            modelAsString: true
            values:
              - value: in_progress
              - value: completed
              - value: cancelled
              - value: failed
        last_error:
          type: object
          description: The last error associated with this vector store file. Will be `null` if there are no errors.
          nullable: true
          properties:
            code:
              type: string
              description: One of `server_error` or `invalid_file` or `unsupported_file`.
              enum:
                [
                  "server_error",
                  "unsupported_file",
                  "invalid_file"
                ]
              x-ms-enum:
                name: VectorStoreFileObjectLastErrorCode
                modelAsString: true
                values:
                  - value: server_error
                  - value: unsupported_file
                  - value: invalid_file
            message:
              type: string
              description: A human-readable description of the error.
          required:
            - code
            - message
        chunking_strategy:
          type: object
          description: |
            The chunking strategy used to chunk the file(s). If not set, will use the
            `auto` strategy. Only applicable if `file_ids` is non-empty.
          oneOf:
            - $ref: "#/components/schemas/autoChunkingStrategyRequestParam"
            - $ref: "#/components/schemas/staticChunkingStrategyRequestParam"
      required:
        - id
        - object
        - usage_bytes
        - created_at
        - vector_store_id
        - status
        - last_error

    staticChunkingStrategy:
      type: object
      additionalProperties: false
      properties:
        max_chunk_size_tokens:
          type: integer
          minimum: 100
          maximum: 4096
          description: |
            The maximum number of tokens in each chunk. The default value is `800`.
            The minimum value is `100` and the maximum value is `4096`.
        chunk_overlap_tokens:
          type: integer
          description: >
            The number of tokens that overlap between chunks. The default value is
            `400`.
            Note that the overlap must not exceed half of `max_chunk_size_tokens`.
      required:
        - max_chunk_size_tokens
        - chunk_overlap_tokens

    autoChunkingStrategyRequestParam:
      type: object
      title: Auto Chunking Strategy
      description: |
        The default strategy. This strategy currently uses a `max_chunk_size_tokens`
        of `800` and `chunk_overlap_tokens` of `400`.
      additionalProperties: false
      properties:
        type:
          type: string
          description: Always `auto`.
          enum:
            - auto
      required:
        - type

    staticChunkingStrategyRequestParam:
      type: object
      title: Static Chunking Strategy
      additionalProperties: false
      properties:
        type:
          type: string
          description: Always `static`.
          enum:
            - static
        static:
          $ref: "#/components/schemas/staticChunkingStrategy"
      required:
        - type
        - static

    chunkingStrategyRequestParam:
      type: object
      description: >-
        The chunking strategy used to chunk the file(s). If not set, will use the
        `auto` strategy.
      oneOf:
        - $ref: "#/components/schemas/autoChunkingStrategyRequestParam"
        - $ref: "#/components/schemas/staticChunkingStrategyRequestParam"

    createVectorStoreFileRequest:
      type: object
      additionalProperties: false
      properties:
        file_id:
          description: A File ID that the vector store should use. Useful for tools like `file_search` that can access files.
          type: string
        chunking_strategy:
          $ref: "#/components/schemas/chunkingStrategyRequestParam"
      required:
        - file_id

    listVectorStoreFilesResponse:
      properties:
        object:
          type: string
          example: "list"
        data:
          type: array
          items:
            $ref: "#/components/schemas/vectorStoreFileObject"
        first_id:
          type: string
          example: "file-abc123"
        last_id:
          type: string
          example: "file-abc456"
        has_more:
          type: boolean
          example: false
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more

    deleteVectorStoreFileResponse:
      type: object
      properties:
        id:
          type: string
        deleted:
          type: boolean
        object:
          type: string
          enum: [vector_store.file.deleted]
          x-ms-enum:
            name: DeleteVectorStoreFileResponseObject
            modelAsString: true
            values:
              - value: vector_store.file.deleted
      required:
        - id
        - object
        - deleted

    vectorStoreFileBatchObject:
      type: object
      title: Vector store file batch
      description: A batch of files attached to a vector store.
      properties:
        id:
          description: The identifier, which can be referenced in API endpoints.
          type: string
        object:
          description: The object type, which is always `vector_store.file_batch`.
          type: string
          enum: ["vector_store.files_batch"]
          x-ms-enum:
            name: VectorStoreFileBatchObjectType
            modelAsString: true
            values:
              - value: vector_store.files_batch
        created_at:
          description: The Unix timestamp (in seconds) for when the vector store files batch was created.
          type: integer
        vector_store_id:
          description: The ID of the vector store that the File is attached to.
          type: string
        status:
          description: The status of the vector store files batch, which can be either `in_progress`, `completed`, `cancelled` or `failed`.
          type: string
          enum: ["in_progress", "completed", "cancelled", "failed"]
          x-ms-enum:
            name: VectorStoreFileBatchObjectStatus
            modelAsString: true
            values:
              - value: in_progress
              - value: completed
              - value: cancelled
              - value: failed
        file_counts:
          type: object
          properties:
            in_progress:
              description: The number of files that are currently being processed.
              type: integer
            completed:
              description: The number of files that have been processed.
              type: integer
            failed:
              description: The number of files that have failed to process.
              type: integer
            cancelled:
              description: The number of files that where cancelled.
              type: integer
            total:
              description: The total number of files.
              type: integer
          required:
            - in_progress
            - completed
            - cancelled
            - failed
            - total
      required:
        - id
        - object
        - created_at
        - vector_store_id
        - status
        - file_counts

    createVectorStoreFileBatchRequest:
      type: object
      additionalProperties: false
      properties:
        file_ids:
          description: A list of File IDs that the vector store should use. Useful for tools like `file_search` that can access files.
          type: array
          minItems: 1
          maxItems: 500
          items:
            type: string
        chunking_strategy:
          $ref: "#/components/schemas/chunkingStrategyRequestParam"
      required:
        - file_ids

    Annotation:
      oneOf:
        - $ref: "#/components/schemas/FileCitation"
        - $ref: "#/components/schemas/UrlCitation"
        - $ref: "#/components/schemas/FilePath"

    Click:
      type: object
      title: Click
      description: |
        A click action.
      properties:
        type:
          type: string
          enum:
            - click
          default: click
          description: |
            Specifies the event type. For a click action, this property is 
            always set to `click`.
          x-stainless-const: true
        button:
          type: string
          enum:
            - left
            - right
            - wheel
            - back
            - forward
          description: >
            Indicates which mouse button was pressed during the click. One of
            `left`, `right`, `wheel`, `back`, or `forward`.
        x:
          type: integer
          description: |
            The x-coordinate where the click occurred.
        y:
          type: integer
          description: |
            The y-coordinate where the click occurred.
      required:
        - type
        - button
        - x
        - y
    CodeInterpreterFileOutput:
      type: object
      title: Code interpreter file output
      description: |
        The output of a code interpreter tool call that is a file.
      properties:
        type:
          type: string
          enum:
            - files
          description: |
            The type of the code interpreter file output. Always `files`.
          x-stainless-const: true
        files:
          type: array
          items:
            type: object
            properties:
              mime_type:
                type: string
                description: |
                  The MIME type of the file.
              file_id:
                type: string
                description: |
                  The ID of the file.
            required:
              - mime_type
              - file_id
      required:
        - type
        - files
    CodeInterpreterTextOutput:
      type: object
      title: Code interpreter text output
      description: |
        The output of a code interpreter tool call that is text.
      properties:
        type:
          type: string
          enum:
            - logs
          description: |
            The type of the code interpreter text output. Always `logs`.
          x-stainless-const: true
        logs:
          type: string
          description: |
            The logs of the code interpreter tool call.
      required:
        - type
        - logs
    CodeInterpreterToolCall:
      type: object
      title: Code interpreter tool call
      description: |
        A tool call to run code.
      properties:
        id:
          type: string
          description: |
            The unique ID of the code interpreter tool call.
        type:
          type: string
          enum:
            - code_interpreter_call
          description: >
            The type of the code interpreter tool call. Always
            `code_interpreter_call`.
          x-stainless-const: true
        code:
          type: string
          description: |
            The code to run.
        status:
          type: string
          enum:
            - in_progress
            - interpreting
            - completed
          description: |
            The status of the code interpreter tool call.
        results:
          type: array
          items:
            x-oaiExpandable: true
            $ref: "#/components/schemas/CodeInterpreterToolOutput"
          description: |
            The results of the code interpreter tool call.
      required:
        - id
        - type
        - code
        - status
        - results
    CodeInterpreterToolOutput:
      oneOf:
        - $ref: "#/components/schemas/CodeInterpreterTextOutput"
        - $ref: "#/components/schemas/CodeInterpreterFileOutput"
    ComparisonFilter:
      type: object
      additionalProperties: false
      title: Comparison Filter
      description: >
        A filter used to compare a specified attribute key to a given value
        using a defined comparison operation.
      properties:
        type:
          type: string
          default: eq
          enum:
            - eq
            - ne
            - gt
            - gte
            - lt
            - lte
          description: >
            Specifies the comparison operator: `eq`, `ne`, `gt`, `gte`, `lt`,
            `lte`.

            - `eq`: equals

            - `ne`: not equal

            - `gt`: greater than

            - `gte`: greater than or equal

            - `lt`: less than

            - `lte`: less than or equal
        key:
          type: string
          description: The key to compare against the value.
        value:
          oneOf:
            - type: string
            - type: number
            - type: boolean
          description: The value to compare against the attribute key; supports string,
            number, or boolean types.
      required:
        - type
        - key
        - value
      x-oaiMeta:
        name: ComparisonFilter

    CompoundFilter:
      $recursiveAnchor: true
      type: object
      additionalProperties: false
      title: Compound Filter
      description: Combine multiple filters using `and` or `or`.
      properties:
        type:
          type: string
          description: "Type of operation: `and` or `or`."
          enum:
            - and
            - or
        filters:
          type: array
          description: Array of filters to combine. Items can be `ComparisonFilter` or
            `CompoundFilter`.
          items:
            oneOf:
              - $ref: "#/components/schemas/ComparisonFilter"
              - $recursiveRef: "#"
      required:
        - type
        - filters
      x-oaiMeta:
        name: CompoundFilter
    ComputerAction:
      oneOf:
        - $ref: "#/components/schemas/Click"
        - $ref: "#/components/schemas/DoubleClick"
        - $ref: "#/components/schemas/Drag"
        - $ref: "#/components/schemas/KeyPress"
        - $ref: "#/components/schemas/Move"
        - $ref: "#/components/schemas/Screenshot"
        - $ref: "#/components/schemas/Scroll"
        - $ref: "#/components/schemas/Type"
        - $ref: "#/components/schemas/Wait"
    ComputerScreenshotImage:
      type: object
      description: |
        A computer screenshot image used with the computer use tool.
      properties:
        type:
          type: string
          enum:
            - computer_screenshot
          default: computer_screenshot
          description: >
            Specifies the event type. For a computer screenshot, this property
            is 

            always set to `computer_screenshot`.
          x-stainless-const: true
        image_url:
          type: string
          description: The URL of the screenshot image.
        file_id:
          type: string
          description: The identifier of an uploaded file that contains the screenshot.
      required:
        - type
    ComputerTool:
      type: object
      title: Computer use
      description: |
        A tool that controls a virtual computer. Learn more about the 
        [computer tool](/docs/guides/tools-computer-use).
      properties:
        type:
          type: string
          enum:
            - computer-preview
          description: |
            The type of the computer use tool. Always `computer_use_preview`.
          x-stainless-const: true
        display_width:
          type: number
          description: |
            The width of the computer display.
        display_height:
          type: number
          description: |
            The height of the computer display.
        environment:
          type: string
          description: |
            The type of computer environment to control.
          enum:
            - mac
            - windows
            - ubuntu
            - browser
      required:
        - type
        - display_width
        - display_height
        - environment
    ComputerToolCall:
      type: object
      title: Computer tool call
      description: >
        A tool call to a computer use tool. See the 

        [computer use guide](/docs/guides/tools-computer-use) for more
        information.
      properties:
        type:
          type: string
          description: The type of the computer call. Always `computer_call`.
          enum:
            - computer_call
          default: computer_call
        id:
          type: string
          description: The unique ID of the computer call.
        call_id:
          type: string
          description: |
            An identifier used when responding to the tool call with output.
        action:
          $ref: "#/components/schemas/ComputerAction"
          x-oaiExpandable: true
        pending_safety_checks:
          type: array
          x-oaiExpandable: true
          items:
            $ref: "#/components/schemas/ComputerToolCallSafetyCheck"
          description: |
            The pending safety checks for the computer call.
        status:
          type: string
          description: |
            The status of the item. One of `in_progress`, `completed`, or
            `incomplete`. Populated when items are returned via API.
          enum:
            - in_progress
            - completed
            - incomplete
      required:
        - type
        - id
        - action
        - call_id
        - pending_safety_checks
        - status
    ComputerToolCallOutput:
      type: object
      title: Computer tool call output
      description: |
        The output of a computer tool call.
      properties:
        type:
          type: string
          description: >
            The type of the computer tool call output. Always
            `computer_call_output`.
          enum:
            - computer_call_output
          default: computer_call_output
          x-stainless-const: true
        id:
          type: string
          description: |
            The ID of the computer tool call output.
        call_id:
          type: string
          description: |
            The ID of the computer tool call that produced the output.
        acknowledged_safety_checks:
          type: array
          x-oaiExpandable: true
          description: >
            The safety checks reported by the API that have been acknowledged by
            the 

            developer.
          items:
            $ref: "#/components/schemas/ComputerToolCallSafetyCheck"
        output:
          $ref: "#/components/schemas/ComputerScreenshotImage"
        status:
          type: string
          description: >
            The status of the message input. One of `in_progress`, `completed`,
            or

            `incomplete`. Populated when input items are returned via API.
          enum:
            - in_progress
            - completed
            - incomplete
      required:
        - type
        - call_id
        - output
    ComputerToolCallOutputResource:
      allOf:
        - $ref: "#/components/schemas/ComputerToolCallOutput"
        - type: object
          properties:
            id:
              type: string
              description: |
                The unique ID of the computer call tool output.
          required:
            - id
    ComputerToolCallSafetyCheck:
      type: object
      description: |
        A pending safety check for the computer call.
      properties:
        id:
          type: string
          description: The ID of the pending safety check.
        code:
          type: string
          description: The type of the pending safety check.
        message:
          type: string
          description: Details about the pending safety check.
      required:
        - id
        - code
        - message
    Coordinate:
      type: object
      title: Coordinate
      description: |
        An x/y coordinate pair, e.g. `{ x: 100, y: 200 }`.
      properties:
        x:
          type: integer
          description: |
            The x-coordinate.
        y:
          type: integer
          description: |
            The y-coordinate.
      required:
        - x
        - y

    CreateModelResponseProperties:
      allOf:
        - $ref: "#/components/schemas/ModelResponseProperties"

    createResponse:
      allOf:
        - $ref: "#/components/schemas/CreateModelResponseProperties"
        - $ref: "#/components/schemas/ResponseProperties"
        - type: object
          properties:
            input:
              description: >
                Text, image, or file inputs to the model, used to generate a
                response.


                Learn more:

                - [Text inputs and outputs](/docs/guides/text)

                - [Image inputs](/docs/guides/images)

                - [File inputs](/docs/guides/pdf-files)

                - [Conversation state](/docs/guides/conversation-state)

                - [Function calling](/docs/guides/function-calling)
              x-oaiExpandable: true
              oneOf:
                - type: string
                  title: Text input
                  description: >
                    A text input to the model, equivalent to a text input with
                    the 

                    `user` role.
                - type: array
                  title: Input item list
                  description: |
                    A list of one or many input items to the model, containing 
                    different content types.
                  items:
                    x-oaiExpandable: true
                    $ref: "#/components/schemas/InputItem"
            include:
              type: array
              items:
                x-oaiExpandable: true
                $ref: "#/components/schemas/includable"
              nullable: true
            parallel_tool_calls:
              type: boolean
              description: |
                Whether to allow the model to run tool calls in parallel.
              default: true
              nullable: true
            store:
              type: boolean
              description: >
                Whether to store the generated model response for later
                retrieval via

                API.
              default: true
              nullable: true
            stream:
              description: >
                If set to true, the model response data will be streamed to the
                client

                as it is generated using [server-sent
                events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).

                See the [Streaming section
                below](/docs/api-reference/responses-streaming)

                for more information.
              type: boolean
              nullable: true
              default: false
          required:
            - model
            - input

    DoubleClick:
      type: object
      title: DoubleClick
      description: |
        A double click action.
      properties:
        type:
          type: string
          enum:
            - double_click
          default: double_click
          description: >
            Specifies the event type. For a double click action, this property
            is 

            always set to `double_click`.
          x-stainless-const: true
        x:
          type: integer
          description: |
            The x-coordinate where the double click occurred.
        y:
          type: integer
          description: |
            The y-coordinate where the double click occurred.
      required:
        - type
        - x
        - y
    Drag:
      type: object
      title: Drag
      description: |
        A drag action.
      properties:
        type:
          type: string
          enum:
            - drag
          default: drag
          description: |
            Specifies the event type. For a drag action, this property is 
            always set to `drag`.
          x-stainless-const: true
        path:
          type: array
          description: >
            An array of coordinates representing the path of the drag action.
            Coordinates will appear as an array

            of objects, eg

            ```

            [
              { x: 100, y: 200 },
              { x: 200, y: 300 }
            ]

            ```
          x-oaiExpandable: true
          items:
            title: Drag path coordinates
            x-oaiExpandable: true
            description: |
              A series of x/y coordinate pairs in the drag path.
            $ref: "#/components/schemas/Coordinate"
      required:
        - type
        - path
    EasyInputMessage:
      type: object
      title: Input message
      description: >
        A message input to the model with a role indicating instruction
        following

        hierarchy. Instructions given with the `developer` or `system` role take

        precedence over instructions given with the `user` role. Messages with
        the

        `assistant` role are presumed to have been generated by the model in
        previous

        interactions.
      properties:
        role:
          type: string
          description: >
            The role of the message input. One of `user`, `assistant`, `system`,
            or

            `developer`.
          enum:
            - user
            - assistant
            - system
            - developer
        content:
          description: >
            Text, image, or audio input to the model, used to generate a
            response.

            Can also contain previous assistant responses.
          x-oaiExpandable: true
          oneOf:
            - type: string
              title: Text input
              description: |
                A text input to the model.
            - $ref: "#/components/schemas/InputMessageContentList"
        type:
          type: string
          description: |
            The type of the message input. Always `message`.
          enum:
            - message
          x-stainless-const: true
      required:
        - role
        - content

    FileCitation:
      type: object
      title: File citation
      description: |
        A citation to a file.
      properties:
        type:
          type: string
          description: |
            The type of the file citation. Always `file_citation`.
          enum:
            - file_citation
          x-stainless-const: true
        index:
          type: integer
          description: |
            The index of the file in the list of files.
        file_id:
          type: string
          description: |
            The ID of the file.
      required:
        - type
        - index
        - file_id
    FilePath:
      type: object
      title: File path
      description: |
        A path to a file.
      properties:
        type:
          type: string
          description: |
            The type of the file path. Always `file_path`.
          enum:
            - file_path
          x-stainless-const: true
        file_id:
          type: string
          description: |
            The ID of the file.
        index:
          type: integer
          description: |
            The index of the file in the list of files.
      required:
        - type
        - file_id
        - index

    FileSearchTool:
      type: object
      title: File search
      description: |
        A tool that searches for relevant content from uploaded files.
        Learn more about the [file search tool](/docs/guides/tools-file-search).
      properties:
        type:
          type: string
          enum:
            - file_search
          description: |
            The type of the file search tool. Always `file_search`.
          x-stainless-const: true
        vector_store_ids:
          type: array
          items:
            type: string
          description: |
            The IDs of the vector stores to search.
        max_num_results:
          type: integer
          description: >
            The maximum number of results to return. This number should be
            between 1 

            and 50 inclusive.
        filters:
          description: A filter to apply based on file attributes.
          oneOf:
            - $ref: "#/components/schemas/ComparisonFilter"
            - $ref: "#/components/schemas/CompoundFilter"
          x-oaiExpandable: true
        ranking_options:
          description: Ranking options for search.
          type: object
          additionalProperties: false
          properties:
            ranker:
              type: string
              description: The ranker to use for the file search.
              enum:
                - auto
                - default-2024-11-15
              default: auto
            score_threshold:
              type: number
              description: >
                The score threshold for the file search, a number between 0 and
                1.

                Numbers closer to 1 will attempt to return only the most
                relevant

                results, but may return fewer results.
              minimum: 0
              maximum: 1
              default: 0
      required:
        - type
        - vector_store_ids
    FileSearchToolCall:
      type: object
      title: File search tool call
      description: >
        The results of a file search tool call. See the 

        [file search guide](/docs/guides/tools-file-search) for more
        information.
      properties:
        id:
          type: string
          description: |
            The unique ID of the file search tool call.
        type:
          type: string
          enum:
            - file_search_call
          description: |
            The type of the file search tool call. Always `file_search_call`.
          x-stainless-const: true
        status:
          type: string
          description: |
            The status of the file search tool call. One of `in_progress`, 
            `searching`, `incomplete` or `failed`,
          enum:
            - in_progress
            - searching
            - completed
            - incomplete
            - failed
        queries:
          type: array
          items:
            type: string
          description: |
            The queries used to search for files.
        results:
          type: array
          description: |
            The results of the file search tool call.
          items:
            type: object
            properties:
              file_id:
                type: string
                description: |
                  The unique ID of the file.
              text:
                type: string
                description: |
                  The text that was retrieved from the file.
              filename:
                type: string
                description: |
                  The name of the file.
              attributes:
                $ref: "#/components/schemas/VectorStoreFileAttributes"
              score:
                type: number
                format: float
                description: |
                  The relevance score of the file - a value between 0 and 1.
          nullable: true
      required:
        - id
        - type
        - status
        - queries

    FunctionTool:
      type: object
      title: Function
      description: >
        Defines a function in your own code the model can choose to call. Learn
        more

        about [function calling](/docs/guides/function-calling).
      properties:
        type:
          type: string
          enum:
            - function
          description: |
            The type of the function tool. Always `function`.
          x-stainless-const: true
        name:
          type: string
          description: |
            The name of the function to call.
        description:
          type: string
          nullable: true
          description: >
            A description of the function. Used by the model to determine
            whether

            or not to call the function.
        parameters:
          type: object
          description: |
            A JSON schema object describing the parameters of the function.
          additionalProperties: true
        strict:
          type: boolean
          description: |
            Whether to enforce strict parameter validation. Default `true`.
      required:
        - type
        - name
        - parameters
        - strict
    FunctionToolCall:
      type: object
      title: Function tool call
      description: >
        A tool call to run a function. See the 

        [function calling guide](/docs/guides/function-calling) for more
        information.
      properties:
        id:
          type: string
          description: |
            The unique ID of the function tool call.
        type:
          type: string
          enum:
            - function_call
          description: |
            The type of the function tool call. Always `function_call`.
          x-stainless-const: true
        call_id:
          type: string
          description: |
            The unique ID of the function tool call generated by the model.
        name:
          type: string
          description: |
            The name of the function to run.
        arguments:
          type: string
          description: |
            A JSON string of the arguments to pass to the function.
        status:
          type: string
          description: |
            The status of the item. One of `in_progress`, `completed`, or
            `incomplete`. Populated when items are returned via API.
          enum:
            - in_progress
            - completed
            - incomplete
      required:
        - id
        - type
        - call_id
        - name
        - arguments
    FunctionToolCallOutput:
      type: object
      title: Function tool call output
      description: |
        The output of a function tool call.
      properties:
        id:
          type: string
          description: >
            The unique ID of the function tool call output. Populated when this
            item

            is returned via API.
        type:
          type: string
          enum:
            - function_call_output
          description: >
            The type of the function tool call output. Always
            `function_call_output`.
          x-stainless-const: true
        call_id:
          type: string
          description: |
            The unique ID of the function tool call generated by the model.
        output:
          type: string
          description: |
            A JSON string of the output of the function tool call.
        status:
          type: string
          description: |
            The status of the item. One of `in_progress`, `completed`, or
            `incomplete`. Populated when items are returned via API.
          enum:
            - in_progress
            - completed
            - incomplete
      required:
        - type
        - call_id
        - output
    FunctionToolCallOutputResource:
      allOf:
        - $ref: "#/components/schemas/FunctionToolCallOutput"
        - type: object
          properties:
            id:
              type: string
              description: |
                The unique ID of the function call tool output.
          required:
            - id

    includable:
      type: string
      description: >
        Specify additional output data to include in the model response.
        Currently

        supported values are:

        - `file_search_call.results`: Include the search results of
          the file search tool call.
        - `message.input_image.image_url`: Include image urls from the input
        message.

        - `computer_call_output.output.image_url`: Include image urls from the
        computer call output.
      enum:
        - file_search_call.results
        - message.input_image.image_url
        - computer_call_output.output.image_url
    InputContent:
      oneOf:
        - $ref: "#/components/schemas/InputText"
        - $ref: "#/components/schemas/InputImage"
        - $ref: "#/components/schemas/InputFile"
      x-oaiExpandable: true
    InputFile:
      type: object
      title: File input
      description: |
        A file input to the model.
      properties:
        type:
          type: string
          description: |
            The type of the input item. Always `input_file`.
          enum:
            - input_file
          x-stainless-const: true
        file_id:
          type: string
          description: |
            The ID of the file to be sent to the model.
        filename:
          type: string
          description: |
            The name of the file to be sent to the model.
        file_data:
          type: string
          description: |
            The content of the file to be sent to the model.
      required:
        - type
    InputImage:
      type: object
      title: Image input
      description: >
        An image input to the model. Learn about [image
        inputs](/docs/guides/vision).
      properties:
        type:
          type: string
          description: |
            The type of the input item. Always `input_image`.
          enum:
            - input_image
          x-stainless-const: true
        image_url:
          type: string
          description: >
            The URL of the image to be sent to the model. A fully qualified URL
            or

            base64 encoded image in a data URL.
          nullable: true
        file_id:
          type: string
          description: |
            The ID of the file to be sent to the model.
          nullable: true
        detail:
          type: string
          description: >
            The detail level of the image to be sent to the model. One of
            `high`,

            `low`, or `auto`. Defaults to `auto`.
          enum:
            - high
            - low
            - auto
          default: auto
      required:
        - type
        - detail
    InputItem:
      oneOf:
        - $ref: "#/components/schemas/EasyInputMessage"
        - type: object
          title: Item
          description: |
            An item representing part of the context for the response to be 
            generated by the model. Can contain text, images, and audio inputs,
            as well as previous assistant responses and tool call outputs.
          $ref: "#/components/schemas/Item"
        - $ref: "#/components/schemas/ItemReference"
      discriminator:
        propertyName: type
    InputMessage:
      type: object
      title: Input message
      description: >
        A message input to the model with a role indicating instruction
        following

        hierarchy. Instructions given with the `developer` or `system` role take

        precedence over instructions given with the `user` role.
      properties:
        type:
          type: string
          description: |
            The type of the message input. Always set to `message`.
          enum:
            - message
          x-stainless-const: true
        role:
          type: string
          description: >
            The role of the message input. One of `user`, `system`, or
            `developer`.
          enum:
            - user
            - system
            - developer
        status:
          type: string
          description: |
            The status of item. One of `in_progress`, `completed`, or
            `incomplete`. Populated when items are returned via API.
          enum:
            - in_progress
            - completed
            - incomplete
        content:
          $ref: "#/components/schemas/InputMessageContentList"
      required:
        - role
        - content
    InputMessageContentList:
      type: array
      title: Input item content list
      description: >
        A list of one or many input items to the model, containing different
        content 

        types.
      x-oaiExpandable: true
      items:
        x-oaiExpandable: true
        $ref: "#/components/schemas/InputContent"
    InputMessageResource:
      allOf:
        - $ref: "#/components/schemas/InputMessage"
        - type: object
          properties:
            id:
              type: string
              description: |
                The unique ID of the message input.
          required:
            - id
    InputText:
      type: object
      title: Text input
      description: |
        A text input to the model.
      properties:
        type:
          type: string
          description: |
            The type of the input item. Always `input_text`.
          enum:
            - input_text
          x-stainless-const: true
        text:
          type: string
          description: |
            The text input to the model.
      required:
        - type
        - text

    Item:
      type: object
      description: |
        Content item used to generate a response.
      oneOf:
        - $ref: "#/components/schemas/InputMessage"
        - $ref: "#/components/schemas/OutputMessage"
        - $ref: "#/components/schemas/FileSearchToolCall"
        - $ref: "#/components/schemas/ComputerToolCall"
        - $ref: "#/components/schemas/ComputerToolCallOutput"
        - $ref: "#/components/schemas/FunctionToolCall"
        - $ref: "#/components/schemas/FunctionToolCallOutput"
        - $ref: "#/components/schemas/ReasoningItem"
      x-oaiExpandable: true
      discriminator:
        propertyName: type
    ItemReference:
      type: object
      title: Item reference
      description: |
        An internal identifier for an item to reference.
      properties:
        id:
          type: string
          description: |
            The ID of the item to reference.
        type:
          type: string
          description: |
            The type of item to reference. Always `item_reference`.
          enum:
            - item_reference
          x-stainless-const: true
      required:
        - id
        - type
    ItemResource:
      description: |
        Content item used to generate a response.
      oneOf:
        - $ref: "#/components/schemas/InputMessageResource"
        - $ref: "#/components/schemas/OutputMessage"
        - $ref: "#/components/schemas/FileSearchToolCall"
        - $ref: "#/components/schemas/ComputerToolCall"
        - $ref: "#/components/schemas/ComputerToolCallOutputResource"
        - $ref: "#/components/schemas/FunctionToolCall"
        - $ref: "#/components/schemas/FunctionToolCallOutputResource"
      x-oaiExpandable: true
      discriminator:
        propertyName: type
    KeyPress:
      type: object
      title: KeyPress
      description: |
        A collection of keypresses the model would like to perform.
      properties:
        type:
          type: string
          enum:
            - keypress
          default: keypress
          description: |
            Specifies the event type. For a keypress action, this property is 
            always set to `keypress`.
          x-stainless-const: true
        keys:
          type: array
          items:
            type: string
            description: |
              One of the keys the model is requesting to be pressed.
          description: >
            The combination of keys the model is requesting to be pressed. This
            is an

            array of strings, each representing a key.
      required:
        - type
        - keys

    Metadata:
      type: object
      description: >
        Set of 16 key-value pairs that can be attached to an object. This can be

        useful for storing additional information about the object in a
        structured

        format, and querying for objects via API or the dashboard. 


        Keys are strings with a maximum length of 64 characters. Values are
        strings

        with a maximum length of 512 characters.
      additionalProperties:
        type: string
      x-oaiTypeLabel: map
      nullable: true

    ModelResponseProperties:
      type: object
      properties:
        model:
          type: string
          description: Model used to generate the responses.
        metadata:
          $ref: "#/components/schemas/Metadata"
        temperature:
          type: number
          minimum: 0
          maximum: 2
          default: 1
          example: 1
          nullable: true
          description: >
            What sampling temperature to use, between 0 and 2. Higher values
            like 0.8 will make the output more random, while lower values like
            0.2 will make it more focused and deterministic.

            We generally recommend altering this or `top_p` but not both.
        top_p:
          type: number
          minimum: 0
          maximum: 1
          default: 1
          example: 1
          nullable: true
          description: >
            An alternative to sampling with temperature, called nucleus
            sampling,

            where the model considers the results of the tokens with top_p
            probability

            mass. So 0.1 means only the tokens comprising the top 10%
            probability mass

            are considered.


            We generally recommend altering this or `temperature` but not both.
        user:
          type: string
          example: user-1234
          description: >
            A unique identifier representing your end-user, which can help
            OpenAI to monitor and detect abuse. [Learn
            more](/docs/guides/safety-best-practices#end-user-ids).

    Move:
      type: object
      title: Move
      description: |
        A mouse move action.
      properties:
        type:
          type: string
          enum:
            - move
          default: move
          description: |
            Specifies the event type. For a move action, this property is 
            always set to `move`.
          x-stainless-const: true
        x:
          type: integer
          description: |
            The x-coordinate to move to.
        y:
          type: integer
          description: |
            The y-coordinate to move to.
      required:
        - type
        - x
        - y
    OutputContent:
      oneOf:
        - $ref: "#/components/schemas/OutputText"
        - $ref: "#/components/schemas/Refusal"
    OutputItem:
      anyOf:
        - $ref: "#/components/schemas/OutputMessage"
        - $ref: "#/components/schemas/FileSearchToolCall"
        - $ref: "#/components/schemas/FunctionToolCall"
        - $ref: "#/components/schemas/ComputerToolCall"
        - $ref: "#/components/schemas/ReasoningItem"
      x-oaiExpandable: true
      discriminator:
        propertyName: type
    OutputMessage:
      type: object
      title: Output message
      description: |
        An output message from the model.
      properties:
        id:
          type: string
          description: |
            The unique ID of the output message.
        type:
          type: string
          description: |
            The type of the output message. Always `message`.
          enum:
            - message
          x-stainless-const: true
        role:
          type: string
          description: |
            The role of the output message. Always `assistant`.
          enum:
            - assistant
          x-stainless-const: true
        content:
          type: array
          description: |
            The content of the output message.
          x-oaiExpandable: true
          items:
            x-oaiExpandable: true
            $ref: "#/components/schemas/OutputContent"
        status:
          type: string
          description: >
            The status of the message input. One of `in_progress`, `completed`,
            or

            `incomplete`. Populated when input items are returned via API.
          enum:
            - in_progress
            - completed
            - incomplete
      required:
        - id
        - type
        - role
        - content
        - status
    OutputText:
      type: object
      title: Output text
      description: |
        A text output from the model.
      properties:
        type:
          type: string
          description: |
            The type of the output text. Always `output_text`.
          enum:
            - output_text
          x-stainless-const: true
        text:
          type: string
          description: |
            The text output from the model.
        annotations:
          type: array
          description: |
            The annotations of the text output.
          items:
            x-oaiExpandable: true
            $ref: "#/components/schemas/Annotation"
      required:
        - type
        - text
        - annotations
    RealtimeSessionCreateRequest:
      type: object
      description: Realtime session object configuration.
      properties:
        modalities:
          description: |
            The set of modalities the model can respond with. To disable audio,
            set this to ["text"].
          items:
            type: string
            default:
              - text
              - audio
            enum:
              - text
              - audio
        model:
          type: string
          description: |
            The name of the deployment used for this session.
        instructions:
          type: string
          description: >
            The default system instructions (i.e. system message) prepended to
            model calls. This field allows the client to guide the model on
            desired responses. The model can be instructed on response content
            and format, (e.g. "be extremely succinct", "act friendly", "here
            are examples of good  responses") and on audio behavior (e.g. "talk
            quickly", "inject emotion into your voice", "laugh frequently").
            The instructions are not guaranteed to be followed by the model,
            but they provide guidance to the model on the desired behavior.


            Note that the server sets default instructions which will be used if
            this  field is not set and are visible in the `session.created`
            event at the  start of the session.
        voice:
          $ref: "#/components/schemas/VoiceIdsShared"
          description: >
            The voice the model uses to respond. Voice cannot be changed during
            the session once the model has responded with audio at least once.
            Current voice options are `alloy`, `ash`, `ballad`, `coral`, `echo`,
            `fable`, `onyx`, `nova`, `sage`, `shimmer`, and `verse`.
        input_audio_format:
          type: string
          default: pcm16
          enum:
            - pcm16
            - g711_ulaw
            - g711_alaw
          description: >
            The format of input audio. Options are `pcm16`, `g711_ulaw`, or
            `g711_alaw`.

            For `pcm16`, input audio must be 16-bit PCM at a 24kHz sample rate, 
            single channel (mono), and little-endian byte order.
        output_audio_format:
          type: string
          default: pcm16
          enum:
            - pcm16
            - g711_ulaw
            - g711_alaw
          description: >
            The format of output audio. Options are `pcm16`, `g711_ulaw`, or
            `g711_alaw`.

            For `pcm16`, output audio is sampled at a rate of 24kHz.
        input_audio_transcription:
          type: object
          description: >
            Configuration for input audio transcription, defaults to off and can
            be set to `null` to turn off once on. Input audio transcription is
            not native to the model, since the model consumes audio directly.
            Transcription runs asynchronously through [the Transcriptions
            endpoint](https://learn.microsoft.com/en-us/azure/ai-services/openai/reference-preview#transcriptions---create)
            and should be treated as guidance of input audio content rather than
            precisely what the model heard. The client can optionally set the
            language and prompt for transcription, these offer additional
            guidance to the transcription service.
          properties:
            model:
              type: string
              description: >
                The model to use for transcription, current options are
                `gpt-4o-transcribe`, `gpt-4o-mini-transcribe`, and `whisper-1`.
            language:
              type: string
              description: >
                The language of the input audio. Supplying the input language in

                [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)
                (e.g. `en`) format will improve accuracy and latency.
            prompt:
              type: string
              description: >
                An optional text to guide the model's style or continue a
                previous audio segment.

                For `whisper-1`, the [prompt is a list of
                keywords](/docs/guides/speech-to-text#prompting).

                For `gpt-4o-transcribe` models, the prompt is a free text
                string, for example "expect words related to technology".
        turn_detection:
          type: object
          description: >
            Configuration for turn detection, ether Server VAD or Semantic VAD.
            This can be set to `null` to turn off, in which case the client must
            manually trigger model response.

            Server VAD means that the model will detect the start and end of
            speech based on audio volume and respond at the end of user speech.

            Semantic VAD is more advanced and uses a turn detection model (in
            conjunction with VAD) to semantically estimate whether the user has
            finished speaking, then dynamically sets a timeout based on this
            probability. For example, if user audio trails off with "uhhm", the
            model will score a low probability of turn end and wait longer for
            the user to continue speaking. This can be useful for more natural
            conversations, but may have a higher latency.
          properties:
            type:
              type: string
              default: server_vad
              enum:
                - server_vad
                - semantic_vad
              description: |
                Type of turn detection.
            eagerness:
              type: string
              default: auto
              enum:
                - low
                - medium
                - high
                - auto
              description: >
                Used only for `semantic_vad` mode. The eagerness of the model to
                respond. `low` will wait longer for the user to continue
                speaking, `high` will respond more quickly. `auto` is the
                default and is equivalent to `medium`.
            threshold:
              type: number
              description: >
                Used only for `server_vad` mode. Activation threshold for VAD
                (0.0 to 1.0), this defaults to 0.5. A higher threshold will require
                louder audio to activate the model, and thus might perform better in
                noisy environments.
            prefix_padding_ms:
              type: integer
              description: >
                Used only for `server_vad` mode. Amount of audio to include
                before the VAD detected speech (in 

                milliseconds). Defaults to 300ms.
            silence_duration_ms:
              type: integer
              description: >
                Used only for `server_vad` mode. Duration of silence to detect
                speech stop (in milliseconds). Defaults 

                to 500ms. With shorter values the model will respond more
                quickly, 

                but may jump in on short pauses from the user.
            create_response:
              type: boolean
              default: true
              description: >
                Whether or not to automatically generate a response when a VAD
                stop event occurs.
            interrupt_response:
              type: boolean
              default: true
              description: >
                Whether or not to automatically interrupt any ongoing response
                with output to the default

                conversation (i.e. `conversation` of `auto`) when a VAD start
                event occurs.
        input_audio_noise_reduction:
          type: object
          default: null
          description: >
            Configuration for input audio noise reduction. This can be set to
            `null` to turn off.

            Noise reduction filters audio added to the input audio buffer before
            it is sent to VAD and the model.

            Filtering the audio can improve VAD and turn detection accuracy
            (reducing false positives) and model performance by improving
            perception of the input audio.
          properties:
            type:
              type: string
              enum:
                - near_field
                - far_field
              description: >
                Type of noise reduction. `near_field` is for close-talking
                microphones such as headphones, `far_field` is for far-field
                microphones such as laptop or conference room microphones.
        tools:
          type: array
          description: Tools (functions) available to the model.
          items:
            type: object
            properties:
              type:
                type: string
                enum:
                  - function
                description: The type of the tool, i.e. `function`.
                x-stainless-const: true
              name:
                type: string
                description: The name of the function.
              description:
                type: string
                description: >
                  The description of the function, including guidance on when
                  and how 

                  to call it, and guidance about what to tell the user when
                  calling 

                  (if anything).
              parameters:
                type: object
                description: Parameters of the function in JSON Schema.
        tool_choice:
          type: string
          default: auto
          description: >
            How the model chooses tools. Options are `auto`, `none`, `required`,
            or 

            specify a function.
        temperature:
          type: number
          default: 0.8
          description: >
            Sampling temperature for the model, limited to [0.6, 1.2]. For audio
            models a temperature of 0.8 is highly recommended for best
            performance.
        max_response_output_tokens:
          oneOf:
            - type: integer
            - type: string
              enum:
                - inf
              x-stainless-const: true
          description: |
            Maximum number of output tokens for a single assistant response,
            inclusive of tool calls. Provide an integer between 1 and 4096 to
            limit output tokens, or `inf` for the maximum available tokens for a
            given model. Defaults to `inf`.
    RealtimeSessionCreateResponse:
      type: object
      description: >
        A new Realtime session configuration, with an ephemeral key. Default
        TTL for keys is one minute.
      properties:
        client_secret:
          type: object
          description: Ephemeral key returned by the API.
          properties:
            value:
              type: string
              description: >
                Ephemeral key usable in client environments to authenticate
                connections to the Realtime API. Use this in client-side
                environments rather than a standard API token, which should only
                be used server-side.
            expires_at:
              type: integer
              description: >
                Timestamp for when the token expires. Currently, all tokens
                expire after one minute.
          required:
            - value
            - expires_at
        modalities:
          description: |
            The set of modalities the model can respond with. To disable audio,
            set this to ["text"].
          items:
            type: string
            enum:
              - text
              - audio
        instructions:
          type: string
          description: >
            The default system instructions (i.e. system message) prepended to
            model calls. This field allows the client to guide the model on desired 
            responses. The model can be instructed on response content and
            format, (e.g. "be extremely succinct", "act friendly", "here are examples of
            good responses") and on audio behavior (e.g. "talk quickly", "inject
            emotion into your voice", "laugh frequently"). The instructions are not
            guaranteed to be followed by the model, but they provide guidance to the model
            on the desired behavior.

            Note that the server sets default instructions which will be used if
            this field is not set and are visible in the `session.created` event at
            the start of the session.
        voice:
          $ref: "#/components/schemas/VoiceIdsShared"
          description: >
            The voice the model uses to respond. Voice cannot be changed during
            the session once the model has responded with audio at least once.
            Current voice options are `alloy`, `ash`, `ballad`, `coral`, `echo` `sage`, 
            `shimmer` and `verse`.
        input_audio_format:
          type: string
          description: >
            The format of input audio. Options are `pcm16`, `g711_ulaw`, or
            `g711_alaw`.
        output_audio_format:
          type: string
          description: >
            The format of output audio. Options are `pcm16`, `g711_ulaw`, or
            `g711_alaw`.
        input_audio_transcription:
          type: object
          description: >
            Configuration for input audio transcription, defaults to off and can
            be set to `null` to turn off once on. Input audio transcription is not
            native to the model, since the model consumes audio directly. Transcription
            runs asynchronously through Whisper and should be treated as rough
            guidance rather than the representation understood by the model.
          properties:
            model:
              type: string
              description: >
                The model to use for transcription, `whisper-1` is the only
                currently supported model.
        turn_detection:
          type: object
          description: >
            Configuration for turn detection. Can be set to `null` to turn off.
            Server VAD means that the model will detect the start and end of speech
            based on audio volume and respond at the end of user speech.
          properties:
            type:
              type: string
              description: >
                Type of turn detection, only `server_vad` is currently supported.
            threshold:
              type: number
              description: >
                Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5.
                A higher threshold will require louder audio to activate the
                model, and thus might perform better in noisy environments.
            prefix_padding_ms:
              type: integer
              description: |
                Amount of audio to include before the VAD detected speech (in 
                milliseconds). Defaults to 300ms.
            silence_duration_ms:
              type: integer
              description: >
                Duration of silence to detect speech stop (in milliseconds).
                Defaults to 500ms. With shorter values the model will respond more
                quickly, but may jump in on short pauses from the user.
        tools:
          type: array
          description: Tools (functions) available to the model.
          items:
            type: object
            properties:
              type:
                type: string
                enum:
                  - function
                description: The type of the tool, i.e. `function`.
                x-stainless-const: true
              name:
                type: string
                description: The name of the function.
              description:
                type: string
                description: >
                  The description of the function, including guidance on when
                  and how to call it, and guidance about what to tell the user when
                  calling (if anything).
              parameters:
                type: object
                description: Parameters of the function in JSON Schema.
        tool_choice:
          type: string
          description: >
            How the model chooses tools. Options are `auto`, `none`, `required`,
            or specify a function.
        temperature:
          type: number
          description: >
            Sampling temperature for the model, limited to [0.6, 1.2]. Defaults
            to 0.8.
        max_response_output_tokens:
          oneOf:
            - type: integer
            - type: string
              enum:
                - inf
              x-stainless-const: true
          description: |
            Maximum number of output tokens for a single assistant response,
            inclusive of tool calls. Provide an integer between 1 and 4096 to
            limit output tokens, or `inf` for the maximum available tokens for a
            given model. Defaults to `inf`.
      required:
        - client_secret
    RealtimeTranscriptionSessionCreateRequest:
      type: object
      description: Realtime transcription session object configuration.
      properties:
        modalities:
          description: |
            The set of modalities the model can respond with. To disable audio,
            set this to ["text"].
          items:
            type: string
            default:
              - text
              - audio
            enum:
              - text
              - audio
        input_audio_format:
          type: string
          default: pcm16
          enum:
            - pcm16
            - g711_ulaw
            - g711_alaw
          description: >
            The format of input audio. Options are `pcm16`, `g711_ulaw`, or
            `g711_alaw`.

            For `pcm16`, input audio must be 16-bit PCM at a 24kHz sample rate, 
            single channel (mono), and little-endian byte order.
        input_audio_transcription:
          type: object
          description: >
            Configuration for input audio transcription. The client can
            optionally set the language and prompt for transcription, these
            offer additional guidance to the transcription service.
          properties:
            model:
              type: string
              description: >
                The model to use for transcription, current options are
                `gpt-4o-transcribe`, `gpt-4o-mini-transcribe`, and `whisper-1`.
              enum:
                - gpt-4o-transcribe
                - gpt-4o-mini-transcribe
                - whisper-1
            language:
              type: string
              description: >
                The language of the input audio. Supplying the input language in

                [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)
                (e.g. `en`) format will improve accuracy and latency.
            prompt:
              type: string
              description: >
                An optional text to guide the model's style or continue a
                previous audio segment.

                For `whisper-1`, the prompt is a list of keywords.

                For `gpt-4o-transcribe` models, the prompt is a free text
                string, for example "expect words related to technology".
        turn_detection:
          type: object
          description: >
            Configuration for turn detection, ether Server VAD or Semantic VAD.
            This can be set to `null` to turn off, in which case the client must
            manually trigger model response.

            Server VAD means that the model will detect the start and end of
            speech based on audio volume and respond at the end of user speech.

            Semantic VAD is more advanced and uses a turn detection model (in
            conjunction with VAD) to semantically estimate whether the user has
            finished speaking, then dynamically sets a timeout based on this
            probability. For example, if user audio trails off with "uhhm", the
            model will score a low probability of turn end and wait longer for
            the user to continue speaking. This can be useful for more natural
            conversations, but may have a higher latency.
          properties:
            type:
              type: string
              default: server_vad
              enum:
                - server_vad
                - semantic_vad
              description: |
                Type of turn detection.
            eagerness:
              type: string
              default: auto
              enum:
                - low
                - medium
                - high
                - auto
              description: >
                Used only for `semantic_vad` mode. The eagerness of the model to
                respond. `low` will wait longer for the user to continue
                speaking, `high` will respond more quickly. `auto` is the
                default and is equivalent to `medium`.
            threshold:
              type: number
              description: >
                Used only for `server_vad` mode. Activation threshold for VAD
                (0.0 to 1.0), this defaults to 0.5. A 

                higher threshold will require louder audio to activate the
                model, and 

                thus might perform better in noisy environments.
            prefix_padding_ms:
              type: integer
              description: >
                Used only for `server_vad` mode. Amount of audio to include
                before the VAD detected speech (in 

                milliseconds). Defaults to 300ms.
            silence_duration_ms:
              type: integer
              description: >
                Used only for `server_vad` mode. Duration of silence to detect
                speech stop (in milliseconds). Defaults to 500ms. With shorter
                values the model will respond more quickly, 
                but may jump in on short pauses from the user.
            create_response:
              type: boolean
              default: true
              description: >
                Whether or not to automatically generate a response when a VAD
                stop event occurs. Not available for transcription sessions.
            interrupt_response:
              type: boolean
              default: true
              description: >
                Whether or not to automatically interrupt any ongoing response
                with output to the default conversation (i.e. `conversation`
                of `auto`) when a VAD start event occurs. Not available for
                transcription sessions.
        input_audio_noise_reduction:
          type: object
          default: null
          description: >
            Configuration for input audio noise reduction. This can be set to
            `null` to turn off.

            Noise reduction filters audio added to the input audio buffer before
            it is sent to VAD and the model.

            Filtering the audio can improve VAD and turn detection accuracy
            (reducing false positives) and model performance by improving
            perception of the input audio.
          properties:
            type:
              type: string
              enum:
                - near_field
                - far_field
              description: >
                Type of noise reduction. `near_field` is for close-talking
                microphones such as headphones, `far_field` is for far-field
                microphones such as laptop or conference room microphones.
        include:
          type: array
          items:
            type: string
          description: >
            The set of items to include in the transcription. Current available
            items are:

            - `item.input_audio_transcription.logprobs`
    RealtimeTranscriptionSessionCreateResponse:
      type: object
      description: >
        A new Realtime transcription session configuration.


        When a session is created on the server via REST API, the session object
        also contains an ephemeral key. Default TTL for keys is one minute.
        This property is not present when a session is updated via the WebSocket API.
      properties:
        client_secret:
          type: object
          description: |
            Ephemeral key returned by the API. Only present when the session is
            created on the server via REST API.
          properties:
            value:
              type: string
              description: >
                Ephemeral key usable in client environments to authenticate
                connections to the Realtime API. Use this in client-side environments rather
                than a standard API token, which should only be used server-side.
            expires_at:
              type: integer
              description: >
                Timestamp for when the token expires. Currently, all tokens
                expire after one minute.
          required:
            - value
            - expires_at
        modalities:
          description: |
            The set of modalities the model can respond with. To disable audio,
            set this to ["text"].
          items:
            type: string
            enum:
              - text
              - audio
        input_audio_format:
          type: string
          description: >
            The format of input audio. Options are `pcm16`, `g711_ulaw`, or
            `g711_alaw`.
        input_audio_transcription:
          type: object
          description: |
            Configuration of the transcription model.
          properties:
            model:
              type: string
              description: >
                The model to use for transcription. Can be `gpt-4o-transcribe`,
                `gpt-4o-mini-transcribe`, or `whisper-1`.
              enum:
                - gpt-4o-transcribe
                - gpt-4o-mini-transcribe
                - whisper-1
            language:
              type: string
              description: >
                The language of the input audio. Supplying the input language in
                [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)
                (e.g. `en`) format will improve accuracy and latency.
            prompt:
              type: string
              description: >
                An optional text to guide the model's style or continue a
                previous audio segment. The prompt
                should match the audio language.
        turn_detection:
          type: object
          description: >
            Configuration for turn detection. Can be set to `null` to turn off.
            Server VAD means that the model will detect the start and end of speech
            based on audio volume and respond at the end of user speech.
          properties:
            type:
              type: string
              description: >
                Type of turn detection, only `server_vad` is currently supported.
            threshold:
              type: number
              description: >
                Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5.
                A higher threshold will require louder audio to activate the
                model, and thus might perform better in noisy environments.
            prefix_padding_ms:
              type: integer
              description: |
                Amount of audio to include before the VAD detected speech (in 
                milliseconds). Defaults to 300ms.
            silence_duration_ms:
              type: integer
              description: >
                Duration of silence to detect speech stop (in milliseconds).
                Defaults to 500ms. With shorter values the model will respond more
                quickly, but may jump in on short pauses from the user.
      required:
        - client_secret
    Reasoning:
      type: object
      description: |
        **o-series models only**

        Configuration options for 
        [reasoning models](https://platform.openai.com/docs/guides/reasoning).
      title: Reasoning
      x-oaiExpandable: true
      properties:
        effort:
          $ref: "#/components/schemas/ReasoningEffort"
        summary:
          type: string
          description: >
            **o-series models only** 


            A summary of the reasoning performed by the model. This can be

            useful for debugging and understanding the model's reasoning
            process.

            One of `concise` or `detailed`.
          enum:
            - concise
            - detailed
          nullable: true
      required:
        - effort

    ReasoningItem:
      type: object
      description: >
        A description of the chain of thought used by a reasoning model while
        generating

        a response.
      title: Reasoning
      x-oaiExpandable: true
      properties:
        type:
          type: string
          description: |
            The type of the object. Always `reasoning`.
          enum:
            - reasoning
          x-stainless-const: true
        id:
          type: string
          description: |
            The unique identifier of the reasoning content.
        content:
          type: array
          description: |
            Reasoning text contents.
          items:
            type: object
            properties:
              type:
                type: string
                description: |
                  The type of the object. Always `text`.
                enum:
                  - reasoning_summary
                x-stainless-const: true
              text:
                type: string
                description: >
                  A short summary of the reasoning used by the model when
                  generating

                  the response.
            required:
              - type
              - text
        status:
          type: string
          description: |
            The status of the item. One of `in_progress`, `completed`, or
            `incomplete`. Populated when items are returned via API.
          enum:
            - in_progress
            - completed
            - incomplete
      required:
        - id
        - content
        - type
    Refusal:
      type: object
      title: Refusal
      description: |
        A refusal from the model.
      properties:
        type:
          type: string
          description: |
            The type of the refusal. Always `refusal`.
          enum:
            - refusal
          x-stainless-const: true
        refusal:
          type: string
          description: |
            The refusal explanationfrom the model.
      required:
        - type
        - refusal
    response:
      allOf:
        - $ref: "#/components/schemas/ModelResponseProperties"
        - $ref: "#/components/schemas/ResponseProperties"
        - type: object
          properties:
            id:
              type: string
              description: |
                Unique identifier for this Response.
            object:
              type: string
              description: |
                The object type of this resource - always set to `response`.
              enum:
                - response
              x-stainless-const: true
            status:
              type: string
              description: >
                The status of the response generation. One of `completed`,
                `failed`, 

                `in_progress`, or `incomplete`.
              enum:
                - completed
                - failed
                - in_progress
                - incomplete
            created_at:
              type: number
              description: |
                Unix timestamp (in seconds) of when this Response was created.
            error:
              $ref: "#/components/schemas/ResponseError"
            incomplete_details:
              type: object
              nullable: true
              description: |
                Details about why the response is incomplete.
              properties:
                reason:
                  type: string
                  description: The reason why the response is incomplete.
                  enum:
                    - max_output_tokens
                    - content_filter
            output:
              type: array
              x-oaiExpandable: true
              description: >
                An array of content items generated by the model.


                - The length and order of items in the `output` array is
                dependent
                  on the model's response.
                - Rather than accessing the first item in the `output` array
                and 
                  assuming it's an `assistant` message with the content generated by
                  the model, you might consider using the `output_text` property where
                  supported in SDKs.
              items:
                $ref: "#/components/schemas/OutputItem"
                x-oaiExpandable: true
            output_text:
              type: string
              nullable: true
              description: >
                SDK-only convenience property that contains the aggregated text
                output 

                from all `output_text` items in the `output` array, if any are
                present. 

                Supported in the Python and JavaScript SDKs.
              x-oaiSupportedSDKs:
                - python
                - javascript
            usage:
              $ref: "#/components/schemas/ResponseUsage"
            parallel_tool_calls:
              type: boolean
              description: |
                Whether to allow the model to run tool calls in parallel.
              default: true
          required:
            - id
            - object
            - created_at
            - error
            - incomplete_details
            - instructions
            - model
            - tools
            - output
            - parallel_tool_calls
            - metadata
            - tool_choice
            - temperature
            - top_p
          x-oaiMeta:
            name: The response object
            group: responses
            example: >
              {
                "id": "resp_67ccd3a9da748190baa7f1570fe91ac604becb25c45c1d41",
                "object": "response",
                "created_at": 1741476777,
                "status": "completed",
                "error": null,
                "incomplete_details": null,
                "instructions": null,
                "max_output_tokens": null,
                "model": "gpt-4o-2024-08-06",
                "output": [
                  {
                    "type": "message",
                    "id": "msg_67ccd3acc8d48190a77525dc6de64b4104becb25c45c1d41",
                    "status": "completed",
                    "role": "assistant",
                    "content": [
                      {
                        "type": "output_text",
                        "text": "The image depicts a scenic landscape with a wooden boardwalk or pathway leading through lush, green grass under a blue sky with some clouds. The setting suggests a peaceful natural area, possibly a park or nature reserve. There are trees and shrubs in the background.",
                        "annotations": []
                      }
                    ]
                  }
                ],
                "parallel_tool_calls": true,
                "previous_response_id": null,
                "reasoning": {
                  "effort": null,
                  "summary": null
                },
                "store": true,
                "temperature": 1.0,
                "text": {
                  "format": {
                    "type": "text"
                  }
                },
                "tool_choice": "auto",
                "tools": [],
                "top_p": 1.0,
                "truncation": "disabled",
                "usage": {
                  "input_tokens": 328,
                  "input_tokens_details": {
                    "cached_tokens": 0
                  },
                  "output_tokens": 52,
                  "output_tokens_details": {
                    "reasoning_tokens": 0
                  },
                  "total_tokens": 380
                },
                "user": null,
                "metadata": {}
              }
    ResponseAudioDeltaEvent:
      type: object
      description: Emitted when there is a partial audio response.
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.audio.delta`.
          enum:
            - response.audio.delta
          x-stainless-const: true
        delta:
          type: string
          description: |
            A chunk of Base64 encoded response audio bytes.
      required:
        - type
        - delta
      x-oaiMeta:
        name: response.audio.delta
        group: responses
        example: |
          {
            "type": "response.audio.delta",
            "response_id": "resp_123",
            "delta": "base64encoded..."
          }
    ResponseAudioDoneEvent:
      type: object
      description: Emitted when the audio response is complete.
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.audio.done`.
          enum:
            - response.audio.done
          x-stainless-const: true
      required:
        - type
        - response_id
      x-oaiMeta:
        name: response.audio.done
        group: responses
        example: |
          {
            "type": "response.audio.done",
            "response_id": "resp-123"
          }
    ResponseAudioTranscriptDeltaEvent:
      type: object
      description: Emitted when there is a partial transcript of audio.
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.audio.transcript.delta`.
          enum:
            - response.audio.transcript.delta
          x-stainless-const: true
        delta:
          type: string
          description: |
            The partial transcript of the audio response.
      required:
        - type
        - response_id
        - delta
      x-oaiMeta:
        name: response.audio.transcript.delta
        group: responses
        example: |
          {
            "type": "response.audio.transcript.delta",
            "response_id": "resp_123",
            "delta": " ... partial transcript ... "
          }
    ResponseAudioTranscriptDoneEvent:
      type: object
      description: Emitted when the full audio transcript is completed.
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.audio.transcript.done`.
          enum:
            - response.audio.transcript.done
          x-stainless-const: true
      required:
        - type
        - response_id
      x-oaiMeta:
        name: response.audio.transcript.done
        group: responses
        example: |
          {
            "type": "response.audio.transcript.done",
            "response_id": "resp_123"
          }
    ResponseCodeInterpreterCallCodeDeltaEvent:
      type: object
      description: Emitted when a partial code snippet is added by the code interpreter.
      properties:
        type:
          type: string
          description: >
            The type of the event. Always
            `response.code_interpreter_call.code.delta`.
          enum:
            - response.code_interpreter_call.code.delta
          x-stainless-const: true
        output_index:
          type: integer
          description: >
            The index of the output item that the code interpreter call is in
            progress.
        delta:
          type: string
          description: |
            The partial code snippet added by the code interpreter.
      required:
        - type
        - response_id
        - output_index
        - delta
      x-oaiMeta:
        name: response.code_interpreter_call.code.delta
        group: responses
        example: |
          {
            "type": "response.code_interpreter_call.code.delta",
            "response_id": "resp-123",
            "output_index": 0,
            "delta": "partial code"
          }
    ResponseCodeInterpreterCallCodeDoneEvent:
      type: object
      description: Emitted when code snippet output is finalized by the code interpreter.
      properties:
        type:
          type: string
          description: >
            The type of the event. Always
            `response.code_interpreter_call.code.done`.
          enum:
            - response.code_interpreter_call.code.done
          x-stainless-const: true
        output_index:
          type: integer
          description: >
            The index of the output item that the code interpreter call is in
            progress.
        code:
          type: string
          description: |
            The final code snippet output by the code interpreter.
      required:
        - type
        - response_id
        - output_index
        - code
      x-oaiMeta:
        name: response.code_interpreter_call.code.done
        group: responses
        example: |
          {
            "type": "response.code_interpreter_call.code.done",
            "response_id": "resp-123",
            "output_index": 3,
            "code": "console.log('done');"
          }
    ResponseCodeInterpreterCallCompletedEvent:
      type: object
      description: Emitted when the code interpreter call is completed.
      properties:
        type:
          type: string
          description: >
            The type of the event. Always
            `response.code_interpreter_call.completed`.
          enum:
            - response.code_interpreter_call.completed
          x-stainless-const: true
        output_index:
          type: integer
          description: >
            The index of the output item that the code interpreter call is in
            progress.
        code_interpreter_call:
          $ref: "#/components/schemas/CodeInterpreterToolCall"
      required:
        - type
        - response_id
        - output_index
        - code_interpreter_call
      x-oaiMeta:
        name: response.code_interpreter_call.completed
        group: responses
        example: |
          {
            "type": "response.code_interpreter_call.completed",
            "response_id": "resp-123",
            "output_index": 5,
            "code_interpreter_call": {}
          }
    ResponseCodeInterpreterCallInProgressEvent:
      type: object
      description: Emitted when a code interpreter call is in progress.
      properties:
        type:
          type: string
          description: >
            The type of the event. Always
            `response.code_interpreter_call.in_progress`.
          enum:
            - response.code_interpreter_call.in_progress
          x-stainless-const: true
        output_index:
          type: integer
          description: >
            The index of the output item that the code interpreter call is in
            progress.
        code_interpreter_call:
          $ref: "#/components/schemas/CodeInterpreterToolCall"
      required:
        - type
        - response_id
        - output_index
        - code_interpreter_call
      x-oaiMeta:
        name: response.code_interpreter_call.in_progress
        group: responses
        example: |
          {
            "type": "response.code_interpreter_call.in.progress",
            "response_id": "resp-123",
            "output_index": 0,
            "code_interpreter_call": {}
          }
    ResponseCodeInterpreterCallInterpretingEvent:
      type: object
      description: Emitted when the code interpreter is actively interpreting the code
        snippet.
      properties:
        type:
          type: string
          description: >
            The type of the event. Always
            `response.code_interpreter_call.interpreting`.
          enum:
            - response.code_interpreter_call.interpreting
          x-stainless-const: true
        output_index:
          type: integer
          description: >
            The index of the output item that the code interpreter call is in
            progress.
        code_interpreter_call:
          $ref: "#/components/schemas/CodeInterpreterToolCall"
      required:
        - type
        - response_id
        - output_index
        - code_interpreter_call
      x-oaiMeta:
        name: response.code_interpreter_call.interpreting
        group: responses
        example: |
          {
            "type": "response.code_interpreter_call.interpreting",
            "response_id": "resp-123",
            "output_index": 4,
            "code_interpreter_call": {}
          }
    ResponseCompletedEvent:
      type: object
      description: Emitted when the model response is complete.
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.completed`.
          enum:
            - response.completed
          x-stainless-const: true
        response:
          $ref: "#/components/schemas/response"
          description: |
            Properties of the completed response.
      required:
        - type
        - response
      x-oaiMeta:
        name: response.completed
        group: responses
        example: >
          {
            "type": "response.completed",
            "response": {
              "id": "resp_123",
              "object": "response",
              "created_at": 1740855869,
              "status": "completed",
              "error": null,
              "incomplete_details": null,
              "input": [],
              "instructions": null,
              "max_output_tokens": null,
              "model": "gpt-4o-mini-2024-07-18",
              "output": [
                {
                  "id": "msg_123",
                  "type": "message",
                  "role": "assistant",
                  "content": [
                    {
                      "type": "output_text",
                      "text": "In a shimmering forest under a sky full of stars, a lonely unicorn named Lila discovered a hidden pond that glowed with moonlight. Every night, she would leave sparkling, magical flowers by the water's edge, hoping to share her beauty with others. One enchanting evening, she woke to find a group of friendly animals gathered around, eager to be friends and share in her magic.",
                      "annotations": []
                    }
                  ]
                }
              ],
              "previous_response_id": null,
              "reasoning_effort": null,
              "store": false,
              "temperature": 1,
              "text": {
                "format": {
                  "type": "text"
                }
              },
              "tool_choice": "auto",
              "tools": [],
              "top_p": 1,
              "truncation": "disabled",
              "usage": {
                "input_tokens": 0,
                "output_tokens": 0,
                "output_tokens_details": {
                  "reasoning_tokens": 0
                },
                "total_tokens": 0
              },
              "user": null,
              "metadata": {}
            }
          }
    ResponseContentPartAddedEvent:
      type: object
      description: Emitted when a new content part is added.
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.content_part.added`.
          enum:
            - response.content_part.added
          x-stainless-const: true
        item_id:
          type: string
          description: |
            The ID of the output item that the content part was added to.
        output_index:
          type: integer
          description: |
            The index of the output item that the content part was added to.
        content_index:
          type: integer
          description: |
            The index of the content part that was added.
        part:
          x-oaiExpandable: true
          $ref: "#/components/schemas/OutputContent"
          description: |
            The content part that was added.
      required:
        - type
        - item_id
        - output_index
        - content_index
        - part
      x-oaiMeta:
        name: response.content_part.added
        group: responses
        example: |
          {
            "type": "response.content_part.added",
            "item_id": "msg_123",
            "output_index": 0,
            "content_index": 0,
            "part": {
              "type": "output_text",
              "text": "",
              "annotations": []
            }
          }
    ResponseContentPartDoneEvent:
      type: object
      description: Emitted when a content part is done.
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.content_part.done`.
          enum:
            - response.content_part.done
          x-stainless-const: true
        item_id:
          type: string
          description: |
            The ID of the output item that the content part was added to.
        output_index:
          type: integer
          description: |
            The index of the output item that the content part was added to.
        content_index:
          type: integer
          description: |
            The index of the content part that is done.
        part:
          x-oaiExpandable: true
          $ref: "#/components/schemas/OutputContent"
          description: |
            The content part that is done.
      required:
        - type
        - item_id
        - output_index
        - content_index
        - part
      x-oaiMeta:
        name: response.content_part.done
        group: responses
        example: >
          {
            "type": "response.content_part.done",
            "item_id": "msg_123",
            "output_index": 0,
            "content_index": 0,
            "part": {
              "type": "output_text",
              "text": "In a shimmering forest under a sky full of stars, a lonely unicorn named Lila discovered a hidden pond that glowed with moonlight. Every night, she would leave sparkling, magical flowers by the water's edge, hoping to share her beauty with others. One enchanting evening, she woke to find a group of friendly animals gathered around, eager to be friends and share in her magic.",
              "annotations": []
            }
          }
    ResponseCreatedEvent:
      type: object
      description: |
        An event that is emitted when a response is created.
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.created`.
          enum:
            - response.created
          x-stainless-const: true
        response:
          $ref: "#/components/schemas/response"
          description: |
            The response that was created.
      required:
        - type
        - response
      x-oaiMeta:
        name: response.created
        group: responses
        example: |
          {
            "type": "response.created",
            "response": {
              "id": "resp_67ccfcdd16748190a91872c75d38539e09e4d4aac714747c",
              "object": "response",
              "created_at": 1741487325,
              "status": "in_progress",
              "error": null,
              "incomplete_details": null,
              "instructions": null,
              "max_output_tokens": null,
              "model": "gpt-4o-2024-08-06",
              "output": [],
              "parallel_tool_calls": true,
              "previous_response_id": null,
              "reasoning": {
                "effort": null,
                "summary": null
              },
              "store": true,
              "temperature": 1,
              "text": {
                "format": {
                  "type": "text"
                }
              },
              "tool_choice": "auto",
              "tools": [],
              "top_p": 1,
              "truncation": "disabled",
              "usage": null,
              "user": null,
              "metadata": {}
            }
          }
    ResponseError:
      type: object
      description: |
        An error object returned when the model fails to generate a Response.
      nullable: true
      properties:
        code:
          $ref: "#/components/schemas/ResponseErrorCode"
        message:
          type: string
          description: |
            A human-readable description of the error.
      required:
        - code
        - message
    ResponseErrorCode:
      type: string
      description: |
        The error code for the response.
      enum:
        - server_error
        - rate_limit_exceeded
        - invalid_prompt
        - vector_store_timeout
        - invalid_image
        - invalid_image_format
        - invalid_base64_image
        - invalid_image_url
        - image_too_large
        - image_too_small
        - image_parse_error
        - image_content_policy_violation
        - invalid_image_mode
        - image_file_too_large
        - unsupported_image_media_type
        - empty_image_file
        - failed_to_download_image
        - image_file_not_found
    ResponseErrorEvent:
      type: object
      description: Emitted when an error occurs.
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `error`.
          enum:
            - error
          x-stainless-const: true
        code:
          type: string
          description: |
            The error code.
          nullable: true
        message:
          type: string
          description: |
            The error message.
        param:
          type: string
          description: |
            The error parameter.
          nullable: true
      required:
        - type
        - code
        - message
        - param
      x-oaiMeta:
        name: error
        group: responses
        example: |
          {
            "type": "error",
            "code": "ERR_SOMETHING",
            "message": "Something went wrong",
            "param": null
          }
    ResponseFailedEvent:
      type: object
      description: |
        An event that is emitted when a response fails.
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.failed`.
          enum:
            - response.failed
          x-stainless-const: true
        response:
          $ref: "#/components/schemas/response"
          description: |
            The response that failed.
      required:
        - type
        - response
      x-oaiMeta:
        name: response.failed
        group: responses
        example: |
          {
            "type": "response.failed",
            "response": {
              "id": "resp_123",
              "object": "response",
              "created_at": 1740855869,
              "status": "failed",
              "error": {
                "code": "server_error",
                "message": "The model failed to generate a response."
              },
              "incomplete_details": null,
              "instructions": null,
              "max_output_tokens": null,
              "model": "gpt-4o-mini-2024-07-18",
              "output": [],
              "previous_response_id": null,
              "reasoning_effort": null,
              "store": false,
              "temperature": 1,
              "text": {
                "format": {
                  "type": "text"
                }
              },
              "tool_choice": "auto",
              "tools": [],
              "top_p": 1,
              "truncation": "disabled",
              "usage": null,
              "user": null,
              "metadata": {}
            }
          }
    ResponseFileSearchCallCompletedEvent:
      type: object
      description: Emitted when a file search call is completed (results found).
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.file_search_call.completed`.
          enum:
            - response.file_search_call.completed
          x-stainless-const: true
        output_index:
          type: integer
          description: |
            The index of the output item that the file search call is initiated.
        item_id:
          type: string
          description: |
            The ID of the output item that the file search call is initiated.
      required:
        - type
        - output_index
        - item_id
      x-oaiMeta:
        name: response.file_search_call.completed
        group: responses
        example: |
          {
            "type": "response.file_search_call.completed",
            "output_index": 0,
            "item_id": "fs_123",
          }
    ResponseFileSearchCallInProgressEvent:
      type: object
      description: Emitted when a file search call is initiated.
      properties:
        type:
          type: string
          description: >
            The type of the event. Always
            `response.file_search_call.in_progress`.
          enum:
            - response.file_search_call.in_progress
          x-stainless-const: true
        output_index:
          type: integer
          description: |
            The index of the output item that the file search call is initiated.
        item_id:
          type: string
          description: |
            The ID of the output item that the file search call is initiated.
      required:
        - type
        - output_index
        - item_id
      x-oaiMeta:
        name: response.file_search_call.in_progress
        group: responses
        example: |
          {
            "type": "response.file_search_call.in_progress",
            "output_index": 0,
            "item_id": "fs_123",
          }
    ResponseFileSearchCallSearchingEvent:
      type: object
      description: Emitted when a file search is currently searching.
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.file_search_call.searching`.
          enum:
            - response.file_search_call.searching
          x-stainless-const: true
        output_index:
          type: integer
          description: |
            The index of the output item that the file search call is searching.
        item_id:
          type: string
          description: |
            The ID of the output item that the file search call is initiated.
      required:
        - type
        - output_index
        - item_id
      x-oaiMeta:
        name: response.file_search_call.searching
        group: responses
        example: |
          {
            "type": "response.file_search_call.searching",
            "output_index": 0,
            "item_id": "fs_123",
          }

    ResponseFunctionCallArgumentsDeltaEvent:
      type: object
      description: Emitted when there is a partial function-call arguments delta.
      properties:
        type:
          type: string
          description: >
            The type of the event. Always
            `response.function_call_arguments.delta`.
          enum:
            - response.function_call_arguments.delta
          x-stainless-const: true
        item_id:
          type: string
          description: >
            The ID of the output item that the function-call arguments delta is
            added to.
        output_index:
          type: integer
          description: >
            The index of the output item that the function-call arguments delta
            is added to.
        delta:
          type: string
          description: |
            The function-call arguments delta that is added.
      required:
        - type
        - item_id
        - output_index
        - delta
      x-oaiMeta:
        name: response.function_call_arguments.delta
        group: responses
        example: |
          {
            "type": "response.function_call_arguments.delta",
            "item_id": "item-abc",
            "output_index": 0,
            "delta": "{ \"arg\":"
          }
    ResponseFunctionCallArgumentsDoneEvent:
      type: object
      description: Emitted when function-call arguments are finalized.
      properties:
        type:
          type: string
          enum:
            - response.function_call_arguments.done
          x-stainless-const: true
        item_id:
          type: string
          description: The ID of the item.
        output_index:
          type: integer
          description: The index of the output item.
        arguments:
          type: string
          description: The function-call arguments.
      required:
        - type
        - item_id
        - output_index
        - arguments
      x-oaiMeta:
        name: response.function_call_arguments.done
        group: responses
        example: |
          {
            "type": "response.function_call_arguments.done",
            "item_id": "item-abc",
            "output_index": 1,
            "arguments": "{ \"arg\": 123 }"
          }
    ResponseInProgressEvent:
      type: object
      description: Emitted when the response is in progress.
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.in_progress`.
          enum:
            - response.in_progress
          x-stainless-const: true
        response:
          $ref: "#/components/schemas/response"
          description: |
            The response that is in progress.
      required:
        - type
        - response
      x-oaiMeta:
        name: response.in_progress
        group: responses
        example: |
          {
            "type": "response.in_progress",
            "response": {
              "id": "resp_67ccfcdd16748190a91872c75d38539e09e4d4aac714747c",
              "object": "response",
              "created_at": 1741487325,
              "status": "in_progress",
              "error": null,
              "incomplete_details": null,
              "instructions": null,
              "max_output_tokens": null,
              "model": "gpt-4o-2024-08-06",
              "output": [],
              "parallel_tool_calls": true,
              "previous_response_id": null,
              "reasoning": {
                "effort": null,
                "summary": null
              },
              "store": true,
              "temperature": 1,
              "text": {
                "format": {
                  "type": "text"
                }
              },
              "tool_choice": "auto",
              "tools": [],
              "top_p": 1,
              "truncation": "disabled",
              "usage": null,
              "user": null,
              "metadata": {}
            }
          }
    ResponseIncompleteEvent:
      type: object
      description: |
        An event that is emitted when a response finishes as incomplete.
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.incomplete`.
          enum:
            - response.incomplete
          x-stainless-const: true
        response:
          $ref: "#/components/schemas/response"
          description: |
            The response that was incomplete.
      required:
        - type
        - response
      x-oaiMeta:
        name: response.incomplete
        group: responses
        example: |
          {
            "type": "response.incomplete",
            "response": {
              "id": "resp_123",
              "object": "response",
              "created_at": 1740855869,
              "status": "incomplete",
              "error": null, 
              "incomplete_details": {
                "reason": "max_tokens"
              },
              "instructions": null,
              "max_output_tokens": null,
              "model": "gpt-4o-mini-2024-07-18",
              "output": [],
              "previous_response_id": null,
              "reasoning_effort": null,
              "store": false,
              "temperature": 1,
              "text": {
                "format": {
                  "type": "text"
                }
              },
              "tool_choice": "auto",
              "tools": [],
              "top_p": 1,
              "truncation": "disabled",
              "usage": null,
              "user": null,
              "metadata": {}
            }
          }
    responseItemList:
      type: object
      description: A list of Response items.
      properties:
        object:
          type: string
          description: The type of object returned, must be `list`.
          enum:
            - list
          x-stainless-const: true
        data:
          type: array
          description: A list of items used to generate this response.
          items:
            $ref: "#/components/schemas/ItemResource"
        has_more:
          type: boolean
          description: Whether there are more items available.
        first_id:
          type: string
          description: The ID of the first item in the list.
        last_id:
          type: string
          description: The ID of the last item in the list.
      required:
        - object
        - data
        - has_more
        - first_id
        - last_id
      x-oaiExpandable: true
      x-oaiMeta:
        name: The input item list
        group: responses
        example: >
          {
            "object": "list",
            "data": [
              {
                "id": "msg_abc123",
                "type": "message",
                "role": "user",
                "content": [
                  {
                    "type": "input_text",
                    "text": "Tell me a three sentence bedtime story about a unicorn."
                  }
                ]
              }
            ],
            "first_id": "msg_abc123",
            "last_id": "msg_abc123",
            "has_more": false
          }
    ResponseOutputItemAddedEvent:
      type: object
      description: Emitted when a new output item is added.
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.output_item.added`.
          enum:
            - response.output_item.added
          x-stainless-const: true
        output_index:
          type: integer
          description: |
            The index of the output item that was added.
        item:
          $ref: "#/components/schemas/OutputItem"
          x-oaiExpandable: true
          description: |
            The output item that was added.
      required:
        - type
        - output_index
        - item
      x-oaiMeta:
        name: response.output_item.added
        group: responses
        example: |
          {
            "type": "response.output_item.added",
            "output_index": 0,
            "item": {
              "id": "msg_123",
              "status": "in_progress",
              "type": "message",
              "role": "assistant",
              "content": []
            }
          }
    ResponseOutputItemDoneEvent:
      type: object
      description: Emitted when an output item is marked done.
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.output_item.done`.
          enum:
            - response.output_item.done
          x-stainless-const: true
        output_index:
          type: integer
          description: |
            The index of the output item that was marked done.
        item:
          $ref: "#/components/schemas/OutputItem"
          x-oaiExpandable: true
          description: |
            The output item that was marked done.
      required:
        - type
        - output_index
        - item
      x-oaiMeta:
        name: response.output_item.done
        group: responses
        example: >
          {
            "type": "response.output_item.done",
            "output_index": 0,
            "item": {
              "id": "msg_123",
              "status": "completed",
              "type": "message",
              "role": "assistant",
              "content": [
                {
                  "type": "output_text",
                  "text": "In a shimmering forest under a sky full of stars, a lonely unicorn named Lila discovered a hidden pond that glowed with moonlight. Every night, she would leave sparkling, magical flowers by the water's edge, hoping to share her beauty with others. One enchanting evening, she woke to find a group of friendly animals gathered around, eager to be friends and share in her magic.",
                  "annotations": []
                }
              ]
            }
          }
    ResponseProperties:
      type: object
      properties:
        previous_response_id:
          type: string
          description: |
            The unique ID of the previous response to the model. Use this to
            create multi-turn conversations. Learn more about 
            [conversation state](/docs/guides/conversation-state).
          nullable: true
        reasoning:
          $ref: "#/components/schemas/Reasoning"
          nullable: true
        max_output_tokens:
          description: >
            An upper bound for the number of tokens that can be generated for a
            response, including visible output tokens and [reasoning
            tokens](/docs/guides/reasoning).
          type: integer
          nullable: true
        instructions:
          type: string
          description: >
            Inserts a system (or developer) message as the first item in the
            model's context.


            When using along with `previous_response_id`, the instructions from
            a previous

            response will be not be carried over to the next response. This
            makes it simple

            to swap out system (or developer) messages in new responses.
          nullable: true
        text:
          type: object
          description: >
            Configuration options for a text response from the model. Can be
            plain

            text or structured JSON data. Learn more:

            - [Text inputs and outputs](/docs/guides/text)

            - [Structured Outputs](/docs/guides/structured-outputs)
          properties:
            format:
              $ref: "#/components/schemas/TextResponseFormatConfiguration"
        tools:
          type: array
          description: >
            An array of tools the model may call while generating a response.
            You 

            can specify which tool to use by setting the `tool_choice`
            parameter.


            The two categories of tools you can provide the model are:


            - **Built-in tools**: Tools that are provided by OpenAI that extend
            the
              model's capabilities, like [web search](/docs/guides/tools-web-search)
              or [file search](/docs/guides/tools-file-search). Learn more about
              [built-in tools](/docs/guides/tools).
            - **Function calls (custom tools)**: Functions that are defined by
            you,
              enabling the model to call your own code. Learn more about
              [function calling](/docs/guides/function-calling).
          items:
            $ref: "#/components/schemas/Tool"
        tool_choice:
          description: >
            How the model should select which tool (or tools) to use when
            generating

            a response. See the `tools` parameter to see how to specify which
            tools

            the model can call.
          x-oaiExpandable: true
          oneOf:
            - $ref: "#/components/schemas/ToolChoiceOptions"
            - $ref: "#/components/schemas/ToolChoiceTypes"
            - $ref: "#/components/schemas/ToolChoiceFunction"
        truncation:
          type: string
          description: >
            The truncation strategy to use for the model response.

            - `auto`: If the context of this response and previous ones exceeds
              the model's context window size, the model will truncate the 
              response to fit the context window by dropping input items in the
              middle of the conversation. 
            - `disabled` (default): If a model response will exceed the context
            window 
              size for a model, the request will fail with a 400 error.
          enum:
            - auto
            - disabled
          nullable: true
          default: disabled
    ResponseRefusalDeltaEvent:
      type: object
      description: Emitted when there is a partial refusal text.
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.refusal.delta`.
          enum:
            - response.refusal.delta
          x-stainless-const: true
        item_id:
          type: string
          description: |
            The ID of the output item that the refusal text is added to.
        output_index:
          type: integer
          description: |
            The index of the output item that the refusal text is added to.
        content_index:
          type: integer
          description: |
            The index of the content part that the refusal text is added to.
        delta:
          type: string
          description: |
            The refusal text that is added.
      required:
        - type
        - item_id
        - output_index
        - content_index
        - delta
      x-oaiMeta:
        name: response.refusal.delta
        group: responses
        example: |
          {
            "type": "response.refusal.delta",
            "item_id": "msg_123",
            "output_index": 0,
            "content_index": 0,
            "delta": "refusal text so far"
          }
    ResponseRefusalDoneEvent:
      type: object
      description: Emitted when refusal text is finalized.
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.refusal.done`.
          enum:
            - response.refusal.done
          x-stainless-const: true
        item_id:
          type: string
          description: |
            The ID of the output item that the refusal text is finalized.
        output_index:
          type: integer
          description: |
            The index of the output item that the refusal text is finalized.
        content_index:
          type: integer
          description: |
            The index of the content part that the refusal text is finalized.
        refusal:
          type: string
          description: |
            The refusal text that is finalized.
      required:
        - type
        - item_id
        - output_index
        - content_index
        - refusal
      x-oaiMeta:
        name: response.refusal.done
        group: responses
        example: |
          {
            "type": "response.refusal.done",
            "item_id": "item-abc",
            "output_index": 1,
            "content_index": 2,
            "refusal": "final refusal text"
          }
    responseStreamEvent:
      anyOf:
        - $ref: "#/components/schemas/ResponseAudioDeltaEvent"
        - $ref: "#/components/schemas/ResponseAudioDoneEvent"
        - $ref: "#/components/schemas/ResponseAudioTranscriptDeltaEvent"
        - $ref: "#/components/schemas/ResponseAudioTranscriptDoneEvent"
        - $ref: "#/components/schemas/ResponseCodeInterpreterCallCodeDeltaEvent"
        - $ref: "#/components/schemas/ResponseCodeInterpreterCallCodeDoneEvent"
        - $ref: "#/components/schemas/ResponseCodeInterpreterCallCompletedEvent"
        - $ref: "#/components/schemas/ResponseCodeInterpreterCallInProgressEvent"
        - $ref: "#/components/schemas/ResponseCodeInterpreterCallInterpretingEvent"
        - $ref: "#/components/schemas/ResponseCompletedEvent"
        - $ref: "#/components/schemas/ResponseContentPartAddedEvent"
        - $ref: "#/components/schemas/ResponseContentPartDoneEvent"
        - $ref: "#/components/schemas/ResponseCreatedEvent"
        - $ref: "#/components/schemas/ResponseErrorEvent"
        - $ref: "#/components/schemas/ResponseFileSearchCallCompletedEvent"
        - $ref: "#/components/schemas/ResponseFileSearchCallInProgressEvent"
        - $ref: "#/components/schemas/ResponseFileSearchCallSearchingEvent"
        - $ref: "#/components/schemas/ResponseFunctionCallArgumentsDeltaEvent"
        - $ref: "#/components/schemas/ResponseFunctionCallArgumentsDoneEvent"
        - $ref: "#/components/schemas/ResponseInProgressEvent"
        - $ref: "#/components/schemas/ResponseFailedEvent"
        - $ref: "#/components/schemas/ResponseIncompleteEvent"
        - $ref: "#/components/schemas/ResponseOutputItemAddedEvent"
        - $ref: "#/components/schemas/ResponseOutputItemDoneEvent"
        - $ref: "#/components/schemas/ResponseRefusalDeltaEvent"
        - $ref: "#/components/schemas/ResponseRefusalDoneEvent"
        - $ref: "#/components/schemas/ResponseTextAnnotationDeltaEvent"
        - $ref: "#/components/schemas/ResponseTextDeltaEvent"
        - $ref: "#/components/schemas/ResponseTextDoneEvent"
      discriminator:
        propertyName: type
    ResponseTextAnnotationDeltaEvent:
      type: object
      description: Emitted when a text annotation is added.
      properties:
        type:
          type: string
          description: >
            The type of the event. Always
            `response.output_text.annotation.added`.
          enum:
            - response.output_text.annotation.added
          x-stainless-const: true
        item_id:
          type: string
          description: |
            The ID of the output item that the text annotation was added to.
        output_index:
          type: integer
          description: |
            The index of the output item that the text annotation was added to.
        content_index:
          type: integer
          description: |
            The index of the content part that the text annotation was added to.
        annotation_index:
          type: integer
          description: |
            The index of the annotation that was added.
        annotation:
          $ref: "#/components/schemas/Annotation"
      required:
        - type
        - item_id
        - output_index
        - content_index
        - annotation_index
        - annotation
      x-oaiMeta:
        name: response.output_text.annotation.added
        group: responses
        example: |
          {
            "type": "response.output_text.annotation.added",
            "item_id": "msg_abc123",
            "output_index": 1,
            "content_index": 0,
            "annotation_index": 0,
            "annotation": {
              "type": "file_citation",
              "index": 390,
              "file_id": "file-4wDz5b167pAf72nx1h9eiN",
              "filename": "dragons.pdf"
            }
          }
    ResponseTextDeltaEvent:
      type: object
      description: Emitted when there is an additional text delta.
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.output_text.delta`.
          enum:
            - response.output_text.delta
          x-stainless-const: true
        item_id:
          type: string
          description: |
            The ID of the output item that the text delta was added to.
        output_index:
          type: integer
          description: |
            The index of the output item that the text delta was added to.
        content_index:
          type: integer
          description: |
            The index of the content part that the text delta was added to.
        delta:
          type: string
          description: |
            The text delta that was added.
      required:
        - type
        - item_id
        - output_index
        - content_index
        - delta
      x-oaiMeta:
        name: response.output_text.delta
        group: responses
        example: |
          {
            "type": "response.output_text.delta",
            "item_id": "msg_123",
            "output_index": 0,
            "content_index": 0,
            "delta": "In"
          }
    ResponseTextDoneEvent:
      type: object
      description: Emitted when text content is finalized.
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.output_text.done`.
          enum:
            - response.output_text.done
          x-stainless-const: true
        item_id:
          type: string
          description: |
            The ID of the output item that the text content is finalized.
        output_index:
          type: integer
          description: |
            The index of the output item that the text content is finalized.
        content_index:
          type: integer
          description: |
            The index of the content part that the text content is finalized.
        text:
          type: string
          description: |
            The text content that is finalized.
      required:
        - type
        - item_id
        - output_index
        - content_index
        - text
      x-oaiMeta:
        name: response.output_text.done
        group: responses
        example: >
          {
            "type": "response.output_text.done",
            "item_id": "msg_123",
            "output_index": 0,
            "content_index": 0,
            "text": "In a shimmering forest under a sky full of stars, a lonely unicorn named Lila discovered a hidden pond that glowed with moonlight. Every night, she would leave sparkling, magical flowers by the water's edge, hoping to share her beauty with others. One enchanting evening, she woke to find a group of friendly animals gathered around, eager to be friends and share in her magic."
          }
    ResponseUsage:
      type: object
      description: |
        Represents token usage details including input tokens, output tokens,
        a breakdown of output tokens, and the total tokens used.
      properties:
        input_tokens:
          type: integer
          description: The number of input tokens.
        output_tokens:
          type: integer
          description: The number of output tokens.
        output_tokens_details:
          type: object
          description: A detailed breakdown of the output tokens.
          properties:
            reasoning_tokens:
              type: integer
              description: The number of reasoning tokens.
          required:
            - reasoning_tokens
        total_tokens:
          type: integer
          description: The total number of tokens used.
      required:
        - input_tokens
        - output_tokens
        - output_tokens_details
        - total_tokens

    Screenshot:
      type: object
      title: Screenshot
      description: |
        A screenshot action.
      properties:
        type:
          type: string
          enum:
            - screenshot
          default: screenshot
          description: |
            Specifies the event type. For a screenshot action, this property is 
            always set to `screenshot`.
          x-stainless-const: true
      required:
        - type
    Scroll:
      type: object
      title: Scroll
      description: |
        A scroll action.
      properties:
        type:
          type: string
          enum:
            - scroll
          default: scroll
          description: |
            Specifies the event type. For a scroll action, this property is 
            always set to `scroll`.
          x-stainless-const: true
        x:
          type: integer
          description: |
            The x-coordinate where the scroll occurred.
        y:
          type: integer
          description: |
            The y-coordinate where the scroll occurred.
        scroll_x:
          type: integer
          description: |
            The horizontal scroll distance.
        scroll_y:
          type: integer
          description: |
            The vertical scroll distance.
      required:
        - type
        - x
        - y
        - scroll_x
        - scroll_y

    TextResponseFormatConfiguration:
      description: >
        An object specifying the format that the model must output.


        Configuring `{ "type": "json_schema" }` enables Structured Outputs, 

        which ensures the model will match your supplied JSON schema. Learn more
        in the 

        [Structured Outputs guide](/docs/guides/structured-outputs).


        The default format is `{ "type": "text" }` with no additional options.


        **Not recommended for gpt-4o and newer models:**


        Setting to `{ "type": "json_object" }` enables the older JSON mode,
        which

        ensures the message the model generates is valid JSON. Using
        `json_schema`

        is preferred for models that support it.
      oneOf:
        - $ref: "#/components/schemas/ResponseFormatText"
        - $ref: "#/components/schemas/TextResponseFormatJsonSchema"
        - $ref: "#/components/schemas/ResponseFormatJsonObject"
      x-oaiExpandable: true
    TextResponseFormatJsonSchema:
      type: object
      title: JSON schema
      description: |
        JSON Schema response format. Used to generate structured JSON responses.
        Learn more about [Structured Outputs](/docs/guides/structured-outputs).
      properties:
        type:
          type: string
          description: The type of response format being defined. Always `json_schema`.
          enum:
            - json_schema
          x-stainless-const: true
        description:
          type: string
          description: >
            A description of what the response format is for, used by the model
            to

            determine how to respond in the format.
        name:
          type: string
          description: |
            The name of the response format. Must be a-z, A-Z, 0-9, or contain
            underscores and dashes, with a maximum length of 64.
        schema:
          $ref: "#/components/schemas/ResponseFormatJsonSchemaSchema"
        strict:
          type: boolean
          nullable: true
          default: false
          description: >
            Whether to enable strict schema adherence when generating the
            output.

            If set to true, the model will always follow the exact schema
            defined

            in the `schema` field. Only a subset of JSON Schema is supported
            when

            `strict` is `true`. To learn more, read the [Structured Outputs

            guide](/docs/guides/structured-outputs).
      required:
        - type
        - schema

    Tool:
      oneOf:
        - $ref: "#/components/schemas/FileSearchTool"
        - $ref: "#/components/schemas/FunctionTool"
        - $ref: "#/components/schemas/ComputerTool"
      x-oaiExpandable: true
    ToolChoiceFunction:
      type: object
      title: Function tool
      description: |
        Use this option to force the model to call a specific function.
      properties:
        type:
          type: string
          enum:
            - function
          description: For function calling, the type is always `function`.
          x-stainless-const: true
        name:
          type: string
          description: The name of the function to call.
      required:
        - type
        - name
    ToolChoiceOptions:
      type: string
      title: Tool choice mode
      description: >
        Controls which (if any) tool is called by the model.


        `none` means the model will not call any tool and instead generates a
        message.


        `auto` means the model can pick between generating a message or calling
        one or

        more tools.


        `required` means the model must call one or more tools.
      enum:
        - none
        - auto
        - required
    ToolChoiceTypes:
      type: object
      title: Hosted tool
      description: >
        Indicates that the model should use a built-in tool to generate a
        response.

        [Learn more about built-in tools](/docs/guides/tools).
      properties:
        type:
          type: string
          description: |
            The type of hosted tool the model should to use. Learn more about
            [built-in tools](/docs/guides/tools).

            Allowed values are:
            - `file_search`
            - `computer_use_preview`
          enum:
            - file_search
            - computer_use_preview
      required:
        - type

    Type:
      type: object
      title: Type
      description: |
        An action to type in text.
      properties:
        type:
          type: string
          enum:
            - type
          default: type
          description: |
            Specifies the event type. For a type action, this property is 
            always set to `type`.
          x-stainless-const: true
        text:
          type: string
          description: |
            The text to type.
      required:
        - type
        - text
    UpdateVectorStoreFileAttributesRequest:
      type: object
      additionalProperties: false
      properties:
        attributes:
          $ref: "#/components/schemas/VectorStoreFileAttributes"
      required:
        - attributes
      x-oaiMeta:
        name: Update vector store file attributes request

    UrlCitation:
      type: object
      title: URL citation
      description: |
        A citation for a web resource used to generate a model response.
      properties:
        url:
          type: string
          description: |
            The URL of the web resource.
        title:
          type: string
          description: |
            The title of the web resource.
        type:
          type: string
          description: |
            The type of the URL citation. Always `url_citation`.
          enum:
            - url_citation
          x-stainless-const: true
        start_index:
          type: integer
          description: |
            The index of the first character of the URL citation in the message.
        end_index:
          type: integer
          description: |
            The index of the last character of the URL citation in the message.
      required:
        - url
        - title
        - type
        - start_index
        - end_index

    VectorStoreFileAttributes:
      type: object
      description: >
        Set of 16 key-value pairs that can be attached to an object. This can
        be 

        useful for storing additional information about the object in a
        structured 

        format, and querying for objects via API or the dashboard. Keys are
        strings 

        with a maximum length of 64 characters. Values are strings with a
        maximum 

        length of 512 characters, booleans, or numbers.
      maxProperties: 16
      propertyNames:
        type: string
        maxLength: 64
      additionalProperties:
        oneOf:
          - type: string
            maxLength: 512
          - type: number
          - type: boolean
      x-oaiTypeLabel: map
      nullable: true

    VectorStoreFileContentResponse:
      type: object
      description: Represents the parsed content of a vector store file.
      properties:
        object:
          type: string
          enum:
            - vector_store.file_content.page
          description: The object type, which is always `vector_store.file_content.page`
          x-stainless-const: true
        data:
          type: array
          description: Parsed content of the file.
          items:
            type: object
            properties:
              type:
                type: string
                description: The content type (currently only `"text"`)
              text:
                type: string
                description: The text content
        has_more:
          type: boolean
          description: Indicates if there are more content pages to fetch.
        next_page:
          type: string
          description: The token for the next page, if any.
          nullable: true
      required:
        - object
        - data
        - has_more
        - next_page

    VectorStoreSearchRequest:
      type: object
      additionalProperties: false
      properties:
        query:
          description: A query string for a search
          oneOf:
            - type: string
            - type: array
              items:
                type: string
                description: A list of queries to search for.
                minItems: 1
        rewrite_query:
          description: Whether to rewrite the natural language query for vector search.
          type: boolean
          default: false
        max_num_results:
          description: The maximum number of results to return. This number should be
            between 1 and 50 inclusive.
          type: integer
          default: 10
          minimum: 1
          maximum: 50
        filters:
          description: A filter to apply based on file attributes.
          oneOf:
            - $ref: "#/components/schemas/ComparisonFilter"
            - $ref: "#/components/schemas/CompoundFilter"
          x-oaiExpandable: true
        ranking_options:
          description: Ranking options for search.
          type: object
          additionalProperties: false
          properties:
            ranker:
              type: string
              enum:
                - auto
                - default-2024-11-15
              default: auto
            score_threshold:
              type: number
              minimum: 0
              maximum: 1
              default: 0
      required:
        - query
      x-oaiMeta:
        name: Vector store search request
    VectorStoreSearchResultContentObject:
      type: object
      additionalProperties: false
      properties:
        type:
          description: The type of content.
          type: string
          enum:
            - text
        text:
          description: The text content returned from search.
          type: string
      required:
        - type
        - text
      x-oaiMeta:
        name: Vector store search result content object
    VectorStoreSearchResultItem:
      type: object
      additionalProperties: false
      properties:
        file_id:
          type: string
          description: The ID of the vector store file.
        filename:
          type: string
          description: The name of the vector store file.
        score:
          type: number
          description: The similarity score for the result.
          minimum: 0
          maximum: 1
        attributes:
          $ref: "#/components/schemas/VectorStoreFileAttributes"
        content:
          type: array
          description: Content chunks from the file.
          items:
            $ref: "#/components/schemas/VectorStoreSearchResultContentObject"
      required:
        - file_id
        - filename
        - score
        - attributes
        - content
      x-oaiMeta:
        name: Vector store search result item
    VectorStoreSearchResultsPage:
      type: object
      additionalProperties: false
      properties:
        object:
          type: string
          enum:
            - vector_store.search_results.page
          description: The object type, which is always `vector_store.search_results.page`
          x-stainless-const: true
        search_query:
          type: array
          items:
            type: string
            description: The query used for this search.
            minItems: 1
        data:
          type: array
          description: The list of search result items.
          items:
            $ref: "#/components/schemas/VectorStoreSearchResultItem"
        has_more:
          type: boolean
          description: Indicates if there are more results to fetch.
        next_page:
          type: string
          description: The token for the next page, if any.
          nullable: true
      required:
        - object
        - search_query
        - data
        - has_more
        - next_page
      x-oaiMeta:
        name: Vector store search results page
    VoiceIdsShared:
      example: ash
      anyOf:
        - type: string
        - type: string
          enum:
            - alloy
            - ash
            - ballad
            - coral
            - echo
            - fable
            - onyx
            - nova
            - sage
            - shimmer
            - verse
    Wait:
      type: object
      title: Wait
      description: |
        A wait action.
      properties:
        type:
          type: string
          enum:
            - wait
          default: wait
          description: |
            Specifies the event type. For a wait action, this property is 
            always set to `wait`.
          x-stainless-const: true
      required:
        - type

    ReasoningEffort:
      type: string
      enum:
        - low
        - medium
        - high
      default: medium
      nullable: true
      description: |
        **o-series models only** 

        Constrains effort on reasoning for 
        [reasoning models](https://platform.openai.com/docs/guides/reasoning).
        Currently supported values are `low`, `medium`, and `high`. Reducing
        reasoning effort can result in faster responses and fewer tokens used
        on reasoning in a response.

  securitySchemes:
    bearer:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://login.microsoftonline.com/common/oauth2/v2.0/authorize
          scopes: {}
      x-tokenInfoFunc: api.middleware.auth.bearer_auth
      x-scopeValidateFunc: api.middleware.auth.validate_scopes
    apiKey:
      type: apiKey
      name: api-key
      in: header
